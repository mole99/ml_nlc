// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _filter_c_top_HH_
#define _filter_c_top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Block_codeRepl5_proc.h"

namespace ap_rtl {

struct filter_c_top : public sc_module {
    // Port declarations 48
    sc_in< sc_lv<24> > xn_0_V_TDATA;
    sc_in< sc_logic > ap_ce;
    sc_out< sc_lv<24> > yn_0_V_TDATA;
    sc_out< sc_lv<24> > yn_1_V_TDATA;
    sc_in< sc_logic > buf_clr;
    sc_in< sc_lv<1> > cfg_filt_en_0;
    sc_in< sc_lv<1> > cfg_filt_en_1;
    sc_in< sc_lv<1> > cfg_filt_en_2;
    sc_in< sc_lv<1> > cfg_filt_en_3;
    sc_in< sc_lv<1> > cfg_filt_en_4;
    sc_in< sc_lv<1> > cfg_filt_en_5;
    sc_in< sc_lv<1> > cfg_filt_en_6;
    sc_in< sc_lv<1> > cfg_filt_en_7;
    sc_in< sc_lv<1> > cfg_filt_en_8;
    sc_in< sc_lv<1> > cfg_filt_en_9;
    sc_in< sc_lv<1> > cfg_filt_en_10;
    sc_in< sc_lv<1> > cfg_filt_en_11;
    sc_in< sc_lv<1> > cfg_filt_en_12;
    sc_in< sc_lv<1> > cfg_filt_en_13;
    sc_in< sc_lv<1> > cfg_filt_en_14;
    sc_in< sc_lv<1> > cfg_filt_en_15;
    sc_in< sc_lv<1> > cfg_filt_en_16;
    sc_in< sc_lv<1> > cfg_filt_en_17;
    sc_in< sc_lv<6> > cfg_gain_val_V;
    sc_in< sc_lv<1> > cfg_delay_sel;
    sc_in< sc_lv<5> > cfg_delay_val_V;
    sc_out< sc_lv<7> > coeff_mem_address0;
    sc_out< sc_logic > coeff_mem_ce0;
    sc_out< sc_lv<16> > coeff_mem_d0;
    sc_in< sc_lv<16> > coeff_mem_q0;
    sc_out< sc_logic > coeff_mem_we0;
    sc_out< sc_lv<7> > mem_address0;
    sc_out< sc_logic > mem_ce0;
    sc_out< sc_lv<24> > mem_d0;
    sc_in< sc_lv<24> > mem_q0;
    sc_out< sc_logic > mem_we0;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > xn_0_V_TVALID;
    sc_out< sc_logic > xn_0_V_TREADY;
    sc_out< sc_logic > yn_0_V_TVALID;
    sc_in< sc_logic > yn_0_V_TREADY;
    sc_out< sc_logic > yn_1_V_TVALID;
    sc_in< sc_logic > yn_1_V_TREADY;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;


    // Module declarations
    filter_c_top(sc_module_name name);
    SC_HAS_PROCESS(filter_c_top);

    ~filter_c_top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Block_codeRepl5_proc* Block_codeRepl5_proc_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_ap_start;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_ap_done;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_ap_continue;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_ap_idle;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_ap_ready;
    sc_signal< sc_lv<1> > Block_codeRepl5_proc_U0_buf_clr;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_xn_0_V_TREADY;
    sc_signal< sc_lv<24> > Block_codeRepl5_proc_U0_yn_0_V_TDATA;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_yn_0_V_TVALID;
    sc_signal< sc_lv<7> > Block_codeRepl5_proc_U0_coeff_mem_address0;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_coeff_mem_ce0;
    sc_signal< sc_lv<24> > Block_codeRepl5_proc_U0_yn_1_V_TDATA;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_yn_1_V_TVALID;
    sc_signal< sc_lv<7> > Block_codeRepl5_proc_U0_mem_address0;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_mem_ce0;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_mem_we0;
    sc_signal< sc_lv<24> > Block_codeRepl5_proc_U0_mem_d0;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_start_full_n;
    sc_signal< sc_logic > Block_codeRepl5_proc_U0_start_write;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_Block_codeRepl5_proc_U0_ap_continue();
    void thread_Block_codeRepl5_proc_U0_ap_start();
    void thread_Block_codeRepl5_proc_U0_buf_clr();
    void thread_Block_codeRepl5_proc_U0_start_full_n();
    void thread_Block_codeRepl5_proc_U0_start_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_coeff_mem_address0();
    void thread_coeff_mem_ce0();
    void thread_coeff_mem_d0();
    void thread_coeff_mem_we0();
    void thread_mem_address0();
    void thread_mem_ce0();
    void thread_mem_d0();
    void thread_mem_we0();
    void thread_xn_0_V_TREADY();
    void thread_yn_0_V_TDATA();
    void thread_yn_0_V_TVALID();
    void thread_yn_1_V_TDATA();
    void thread_yn_1_V_TVALID();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
