// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "filter_c_top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<24> filter_c_top::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<7> filter_c_top::ap_const_lv7_0 = "0000000";
const sc_logic filter_c_top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> filter_c_top::ap_const_lv16_0 = "0000000000000000";
const sc_logic filter_c_top::ap_const_logic_1 = sc_dt::Log_1;

filter_c_top::filter_c_top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Block_codeRepl5_proc_U0 = new Block_codeRepl5_proc("Block_codeRepl5_proc_U0");
    Block_codeRepl5_proc_U0->ap_clk(ap_clk);
    Block_codeRepl5_proc_U0->ap_rst(ap_rst_n_inv);
    Block_codeRepl5_proc_U0->ap_start(Block_codeRepl5_proc_U0_ap_start);
    Block_codeRepl5_proc_U0->ap_done(Block_codeRepl5_proc_U0_ap_done);
    Block_codeRepl5_proc_U0->ap_continue(Block_codeRepl5_proc_U0_ap_continue);
    Block_codeRepl5_proc_U0->ap_ce(ap_ce);
    Block_codeRepl5_proc_U0->ap_idle(Block_codeRepl5_proc_U0_ap_idle);
    Block_codeRepl5_proc_U0->ap_ready(Block_codeRepl5_proc_U0_ap_ready);
    Block_codeRepl5_proc_U0->buf_clr(Block_codeRepl5_proc_U0_buf_clr);
    Block_codeRepl5_proc_U0->cfg_gain_val_V(cfg_gain_val_V);
    Block_codeRepl5_proc_U0->xn_0_V_TDATA(xn_0_V_TDATA);
    Block_codeRepl5_proc_U0->xn_0_V_TVALID(xn_0_V_TVALID);
    Block_codeRepl5_proc_U0->xn_0_V_TREADY(Block_codeRepl5_proc_U0_xn_0_V_TREADY);
    Block_codeRepl5_proc_U0->cfg_delay_val_V(cfg_delay_val_V);
    Block_codeRepl5_proc_U0->cfg_delay_sel(cfg_delay_sel);
    Block_codeRepl5_proc_U0->cfg_filt_en_1(cfg_filt_en_1);
    Block_codeRepl5_proc_U0->cfg_filt_en_2(cfg_filt_en_2);
    Block_codeRepl5_proc_U0->cfg_filt_en_3(cfg_filt_en_3);
    Block_codeRepl5_proc_U0->cfg_filt_en_4(cfg_filt_en_4);
    Block_codeRepl5_proc_U0->cfg_filt_en_5(cfg_filt_en_5);
    Block_codeRepl5_proc_U0->cfg_filt_en_6(cfg_filt_en_6);
    Block_codeRepl5_proc_U0->cfg_filt_en_7(cfg_filt_en_7);
    Block_codeRepl5_proc_U0->cfg_filt_en_8(cfg_filt_en_8);
    Block_codeRepl5_proc_U0->cfg_filt_en_9(cfg_filt_en_9);
    Block_codeRepl5_proc_U0->cfg_filt_en_10(cfg_filt_en_10);
    Block_codeRepl5_proc_U0->cfg_filt_en_11(cfg_filt_en_11);
    Block_codeRepl5_proc_U0->cfg_filt_en_0(cfg_filt_en_0);
    Block_codeRepl5_proc_U0->yn_0_V_TDATA(Block_codeRepl5_proc_U0_yn_0_V_TDATA);
    Block_codeRepl5_proc_U0->yn_0_V_TVALID(Block_codeRepl5_proc_U0_yn_0_V_TVALID);
    Block_codeRepl5_proc_U0->yn_0_V_TREADY(yn_0_V_TREADY);
    Block_codeRepl5_proc_U0->cfg_filt_en_13(cfg_filt_en_13);
    Block_codeRepl5_proc_U0->cfg_filt_en_14(cfg_filt_en_14);
    Block_codeRepl5_proc_U0->cfg_filt_en_15(cfg_filt_en_15);
    Block_codeRepl5_proc_U0->cfg_filt_en_16(cfg_filt_en_16);
    Block_codeRepl5_proc_U0->cfg_filt_en_17(cfg_filt_en_17);
    Block_codeRepl5_proc_U0->cfg_filt_en_12(cfg_filt_en_12);
    Block_codeRepl5_proc_U0->coeff_mem_address0(Block_codeRepl5_proc_U0_coeff_mem_address0);
    Block_codeRepl5_proc_U0->coeff_mem_ce0(Block_codeRepl5_proc_U0_coeff_mem_ce0);
    Block_codeRepl5_proc_U0->coeff_mem_q0(coeff_mem_q0);
    Block_codeRepl5_proc_U0->yn_1_V_TDATA(Block_codeRepl5_proc_U0_yn_1_V_TDATA);
    Block_codeRepl5_proc_U0->yn_1_V_TVALID(Block_codeRepl5_proc_U0_yn_1_V_TVALID);
    Block_codeRepl5_proc_U0->yn_1_V_TREADY(yn_1_V_TREADY);
    Block_codeRepl5_proc_U0->mem_address0(Block_codeRepl5_proc_U0_mem_address0);
    Block_codeRepl5_proc_U0->mem_ce0(Block_codeRepl5_proc_U0_mem_ce0);
    Block_codeRepl5_proc_U0->mem_we0(Block_codeRepl5_proc_U0_mem_we0);
    Block_codeRepl5_proc_U0->mem_d0(Block_codeRepl5_proc_U0_mem_d0);
    Block_codeRepl5_proc_U0->mem_q0(mem_q0);

    SC_METHOD(thread_Block_codeRepl5_proc_U0_ap_continue);

    SC_METHOD(thread_Block_codeRepl5_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Block_codeRepl5_proc_U0_buf_clr);
    sensitive << ( buf_clr );

    SC_METHOD(thread_Block_codeRepl5_proc_U0_start_full_n);

    SC_METHOD(thread_Block_codeRepl5_proc_U0_start_write);

    SC_METHOD(thread_ap_done);
    sensitive << ( Block_codeRepl5_proc_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Block_codeRepl5_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Block_codeRepl5_proc_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Block_codeRepl5_proc_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( Block_codeRepl5_proc_U0_ap_ready );

    SC_METHOD(thread_coeff_mem_address0);
    sensitive << ( Block_codeRepl5_proc_U0_coeff_mem_address0 );

    SC_METHOD(thread_coeff_mem_ce0);
    sensitive << ( Block_codeRepl5_proc_U0_coeff_mem_ce0 );

    SC_METHOD(thread_coeff_mem_d0);

    SC_METHOD(thread_coeff_mem_we0);

    SC_METHOD(thread_mem_address0);
    sensitive << ( Block_codeRepl5_proc_U0_mem_address0 );

    SC_METHOD(thread_mem_ce0);
    sensitive << ( Block_codeRepl5_proc_U0_mem_ce0 );

    SC_METHOD(thread_mem_d0);
    sensitive << ( Block_codeRepl5_proc_U0_mem_d0 );

    SC_METHOD(thread_mem_we0);
    sensitive << ( Block_codeRepl5_proc_U0_mem_we0 );

    SC_METHOD(thread_xn_0_V_TREADY);
    sensitive << ( Block_codeRepl5_proc_U0_xn_0_V_TREADY );

    SC_METHOD(thread_yn_0_V_TDATA);
    sensitive << ( Block_codeRepl5_proc_U0_yn_0_V_TDATA );

    SC_METHOD(thread_yn_0_V_TVALID);
    sensitive << ( Block_codeRepl5_proc_U0_yn_0_V_TVALID );

    SC_METHOD(thread_yn_1_V_TDATA);
    sensitive << ( Block_codeRepl5_proc_U0_yn_1_V_TDATA );

    SC_METHOD(thread_yn_1_V_TVALID);
    sensitive << ( Block_codeRepl5_proc_U0_yn_1_V_TVALID );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "filter_c_top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, xn_0_V_TDATA, "(port)xn_0_V_TDATA");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, yn_0_V_TDATA, "(port)yn_0_V_TDATA");
    sc_trace(mVcdFile, yn_1_V_TDATA, "(port)yn_1_V_TDATA");
    sc_trace(mVcdFile, buf_clr, "(port)buf_clr");
    sc_trace(mVcdFile, cfg_filt_en_0, "(port)cfg_filt_en_0");
    sc_trace(mVcdFile, cfg_filt_en_1, "(port)cfg_filt_en_1");
    sc_trace(mVcdFile, cfg_filt_en_2, "(port)cfg_filt_en_2");
    sc_trace(mVcdFile, cfg_filt_en_3, "(port)cfg_filt_en_3");
    sc_trace(mVcdFile, cfg_filt_en_4, "(port)cfg_filt_en_4");
    sc_trace(mVcdFile, cfg_filt_en_5, "(port)cfg_filt_en_5");
    sc_trace(mVcdFile, cfg_filt_en_6, "(port)cfg_filt_en_6");
    sc_trace(mVcdFile, cfg_filt_en_7, "(port)cfg_filt_en_7");
    sc_trace(mVcdFile, cfg_filt_en_8, "(port)cfg_filt_en_8");
    sc_trace(mVcdFile, cfg_filt_en_9, "(port)cfg_filt_en_9");
    sc_trace(mVcdFile, cfg_filt_en_10, "(port)cfg_filt_en_10");
    sc_trace(mVcdFile, cfg_filt_en_11, "(port)cfg_filt_en_11");
    sc_trace(mVcdFile, cfg_filt_en_12, "(port)cfg_filt_en_12");
    sc_trace(mVcdFile, cfg_filt_en_13, "(port)cfg_filt_en_13");
    sc_trace(mVcdFile, cfg_filt_en_14, "(port)cfg_filt_en_14");
    sc_trace(mVcdFile, cfg_filt_en_15, "(port)cfg_filt_en_15");
    sc_trace(mVcdFile, cfg_filt_en_16, "(port)cfg_filt_en_16");
    sc_trace(mVcdFile, cfg_filt_en_17, "(port)cfg_filt_en_17");
    sc_trace(mVcdFile, cfg_gain_val_V, "(port)cfg_gain_val_V");
    sc_trace(mVcdFile, cfg_delay_sel, "(port)cfg_delay_sel");
    sc_trace(mVcdFile, cfg_delay_val_V, "(port)cfg_delay_val_V");
    sc_trace(mVcdFile, coeff_mem_address0, "(port)coeff_mem_address0");
    sc_trace(mVcdFile, coeff_mem_ce0, "(port)coeff_mem_ce0");
    sc_trace(mVcdFile, coeff_mem_d0, "(port)coeff_mem_d0");
    sc_trace(mVcdFile, coeff_mem_q0, "(port)coeff_mem_q0");
    sc_trace(mVcdFile, coeff_mem_we0, "(port)coeff_mem_we0");
    sc_trace(mVcdFile, mem_address0, "(port)mem_address0");
    sc_trace(mVcdFile, mem_ce0, "(port)mem_ce0");
    sc_trace(mVcdFile, mem_d0, "(port)mem_d0");
    sc_trace(mVcdFile, mem_q0, "(port)mem_q0");
    sc_trace(mVcdFile, mem_we0, "(port)mem_we0");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, xn_0_V_TVALID, "(port)xn_0_V_TVALID");
    sc_trace(mVcdFile, xn_0_V_TREADY, "(port)xn_0_V_TREADY");
    sc_trace(mVcdFile, yn_0_V_TVALID, "(port)yn_0_V_TVALID");
    sc_trace(mVcdFile, yn_0_V_TREADY, "(port)yn_0_V_TREADY");
    sc_trace(mVcdFile, yn_1_V_TVALID, "(port)yn_1_V_TVALID");
    sc_trace(mVcdFile, yn_1_V_TREADY, "(port)yn_1_V_TREADY");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_ap_start, "Block_codeRepl5_proc_U0_ap_start");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_ap_done, "Block_codeRepl5_proc_U0_ap_done");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_ap_continue, "Block_codeRepl5_proc_U0_ap_continue");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_ap_idle, "Block_codeRepl5_proc_U0_ap_idle");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_ap_ready, "Block_codeRepl5_proc_U0_ap_ready");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_buf_clr, "Block_codeRepl5_proc_U0_buf_clr");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_xn_0_V_TREADY, "Block_codeRepl5_proc_U0_xn_0_V_TREADY");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_yn_0_V_TDATA, "Block_codeRepl5_proc_U0_yn_0_V_TDATA");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_yn_0_V_TVALID, "Block_codeRepl5_proc_U0_yn_0_V_TVALID");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_coeff_mem_address0, "Block_codeRepl5_proc_U0_coeff_mem_address0");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_coeff_mem_ce0, "Block_codeRepl5_proc_U0_coeff_mem_ce0");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_yn_1_V_TDATA, "Block_codeRepl5_proc_U0_yn_1_V_TDATA");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_yn_1_V_TVALID, "Block_codeRepl5_proc_U0_yn_1_V_TVALID");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_mem_address0, "Block_codeRepl5_proc_U0_mem_address0");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_mem_ce0, "Block_codeRepl5_proc_U0_mem_ce0");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_mem_we0, "Block_codeRepl5_proc_U0_mem_we0");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_mem_d0, "Block_codeRepl5_proc_U0_mem_d0");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_start_full_n, "Block_codeRepl5_proc_U0_start_full_n");
    sc_trace(mVcdFile, Block_codeRepl5_proc_U0_start_write, "Block_codeRepl5_proc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("filter_c_top.hdltvin.dat");
    mHdltvoutHandle.open("filter_c_top.hdltvout.dat");
}

filter_c_top::~filter_c_top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Block_codeRepl5_proc_U0;
}

void filter_c_top::thread_Block_codeRepl5_proc_U0_ap_continue() {
    Block_codeRepl5_proc_U0_ap_continue = ap_const_logic_1;
}

void filter_c_top::thread_Block_codeRepl5_proc_U0_ap_start() {
    Block_codeRepl5_proc_U0_ap_start = ap_start.read();
}

void filter_c_top::thread_Block_codeRepl5_proc_U0_buf_clr() {
    Block_codeRepl5_proc_U0_buf_clr =  (sc_lv<1>) (buf_clr.read());
}

void filter_c_top::thread_Block_codeRepl5_proc_U0_start_full_n() {
    Block_codeRepl5_proc_U0_start_full_n = ap_const_logic_1;
}

void filter_c_top::thread_Block_codeRepl5_proc_U0_start_write() {
    Block_codeRepl5_proc_U0_start_write = ap_const_logic_0;
}

void filter_c_top::thread_ap_done() {
    ap_done = Block_codeRepl5_proc_U0_ap_done.read();
}

void filter_c_top::thread_ap_idle() {
    ap_idle = Block_codeRepl5_proc_U0_ap_idle.read();
}

void filter_c_top::thread_ap_ready() {
    ap_ready = Block_codeRepl5_proc_U0_ap_ready.read();
}

void filter_c_top::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void filter_c_top::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void filter_c_top::thread_ap_sync_done() {
    ap_sync_done = Block_codeRepl5_proc_U0_ap_done.read();
}

void filter_c_top::thread_ap_sync_ready() {
    ap_sync_ready = Block_codeRepl5_proc_U0_ap_ready.read();
}

void filter_c_top::thread_coeff_mem_address0() {
    coeff_mem_address0 = Block_codeRepl5_proc_U0_coeff_mem_address0.read();
}

void filter_c_top::thread_coeff_mem_ce0() {
    coeff_mem_ce0 = Block_codeRepl5_proc_U0_coeff_mem_ce0.read();
}

void filter_c_top::thread_coeff_mem_d0() {
    coeff_mem_d0 = ap_const_lv16_0;
}

void filter_c_top::thread_coeff_mem_we0() {
    coeff_mem_we0 = ap_const_logic_0;
}

void filter_c_top::thread_mem_address0() {
    mem_address0 = Block_codeRepl5_proc_U0_mem_address0.read();
}

void filter_c_top::thread_mem_ce0() {
    mem_ce0 = Block_codeRepl5_proc_U0_mem_ce0.read();
}

void filter_c_top::thread_mem_d0() {
    mem_d0 = Block_codeRepl5_proc_U0_mem_d0.read();
}

void filter_c_top::thread_mem_we0() {
    mem_we0 = Block_codeRepl5_proc_U0_mem_we0.read();
}

void filter_c_top::thread_xn_0_V_TREADY() {
    xn_0_V_TREADY = Block_codeRepl5_proc_U0_xn_0_V_TREADY.read();
}

void filter_c_top::thread_yn_0_V_TDATA() {
    yn_0_V_TDATA = Block_codeRepl5_proc_U0_yn_0_V_TDATA.read();
}

void filter_c_top::thread_yn_0_V_TVALID() {
    yn_0_V_TVALID = Block_codeRepl5_proc_U0_yn_0_V_TVALID.read();
}

void filter_c_top::thread_yn_1_V_TDATA() {
    yn_1_V_TDATA = Block_codeRepl5_proc_U0_yn_1_V_TDATA.read();
}

void filter_c_top::thread_yn_1_V_TVALID() {
    yn_1_V_TVALID = Block_codeRepl5_proc_U0_yn_1_V_TVALID.read();
}

void filter_c_top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"xn_0_V_TDATA\" :  \"" << xn_0_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_ce\" :  \"" << ap_ce.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"yn_0_V_TDATA\" :  \"" << yn_0_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"yn_1_V_TDATA\" :  \"" << yn_1_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"buf_clr\" :  \"" << buf_clr.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_0\" :  \"" << cfg_filt_en_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_1\" :  \"" << cfg_filt_en_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_2\" :  \"" << cfg_filt_en_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_3\" :  \"" << cfg_filt_en_3.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_4\" :  \"" << cfg_filt_en_4.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_5\" :  \"" << cfg_filt_en_5.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_6\" :  \"" << cfg_filt_en_6.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_7\" :  \"" << cfg_filt_en_7.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_8\" :  \"" << cfg_filt_en_8.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_9\" :  \"" << cfg_filt_en_9.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_10\" :  \"" << cfg_filt_en_10.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_11\" :  \"" << cfg_filt_en_11.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_12\" :  \"" << cfg_filt_en_12.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_13\" :  \"" << cfg_filt_en_13.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_14\" :  \"" << cfg_filt_en_14.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_15\" :  \"" << cfg_filt_en_15.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_16\" :  \"" << cfg_filt_en_16.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_filt_en_17\" :  \"" << cfg_filt_en_17.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_gain_val_V\" :  \"" << cfg_gain_val_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_delay_sel\" :  \"" << cfg_delay_sel.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cfg_delay_val_V\" :  \"" << cfg_delay_val_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeff_mem_address0\" :  \"" << coeff_mem_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeff_mem_ce0\" :  \"" << coeff_mem_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeff_mem_d0\" :  \"" << coeff_mem_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_mem_q0\" :  \"" << coeff_mem_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeff_mem_we0\" :  \"" << coeff_mem_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_address0\" :  \"" << mem_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_ce0\" :  \"" << mem_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_d0\" :  \"" << mem_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_q0\" :  \"" << mem_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_we0\" :  \"" << mem_we0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xn_0_V_TVALID\" :  \"" << xn_0_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"xn_0_V_TREADY\" :  \"" << xn_0_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"yn_0_V_TVALID\" :  \"" << yn_0_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"yn_0_V_TREADY\" :  \"" << yn_0_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"yn_1_V_TVALID\" :  \"" << yn_1_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"yn_1_V_TREADY\" :  \"" << yn_1_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

