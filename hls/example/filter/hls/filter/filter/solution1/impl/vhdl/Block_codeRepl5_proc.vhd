-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_codeRepl5_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_clr : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_gain_val_V : IN STD_LOGIC_VECTOR (5 downto 0);
    xn_0_V_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    xn_0_V_TVALID : IN STD_LOGIC;
    xn_0_V_TREADY : OUT STD_LOGIC;
    cfg_delay_val_V : IN STD_LOGIC_VECTOR (4 downto 0);
    cfg_delay_sel : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_3 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_4 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_5 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_6 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_7 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_8 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_9 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_10 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_11 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_0 : IN STD_LOGIC_VECTOR (0 downto 0);
    yn_0_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    yn_0_V_TVALID : OUT STD_LOGIC;
    yn_0_V_TREADY : IN STD_LOGIC;
    cfg_filt_en_13 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_14 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_15 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_16 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_17 : IN STD_LOGIC_VECTOR (0 downto 0);
    cfg_filt_en_12 : IN STD_LOGIC_VECTOR (0 downto 0);
    coeff_mem_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    coeff_mem_ce0 : OUT STD_LOGIC;
    coeff_mem_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    yn_1_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    yn_1_V_TVALID : OUT STD_LOGIC;
    yn_1_V_TREADY : IN STD_LOGIC;
    mem_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mem_ce0 : OUT STD_LOGIC;
    mem_we0 : OUT STD_LOGIC;
    mem_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    mem_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of Block_codeRepl5_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv24_7FFFFF : STD_LOGIC_VECTOR (23 downto 0) := "011111111111111111111111";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv7_5A : STD_LOGIC_VECTOR (6 downto 0) := "1011010";
    constant ap_const_lv7_36 : STD_LOGIC_VECTOR (6 downto 0) := "0110110";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal xn_0_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal xn_0_V_0_vld_in : STD_LOGIC;
    signal xn_0_V_0_vld_out : STD_LOGIC;
    signal xn_0_V_0_ack_in : STD_LOGIC;
    signal xn_0_V_0_ack_out : STD_LOGIC;
    signal xn_0_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal xn_0_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal xn_0_V_0_sel_rd : STD_LOGIC := '0';
    signal xn_0_V_0_sel_wr : STD_LOGIC := '0';
    signal xn_0_V_0_sel : STD_LOGIC;
    signal xn_0_V_0_load_A : STD_LOGIC;
    signal xn_0_V_0_load_B : STD_LOGIC;
    signal xn_0_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xn_0_V_0_state_cmp_full : STD_LOGIC;
    signal yn_0_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal yn_0_V_1_vld_in : STD_LOGIC;
    signal yn_0_V_1_vld_out : STD_LOGIC;
    signal yn_0_V_1_ack_in : STD_LOGIC;
    signal yn_0_V_1_ack_out : STD_LOGIC;
    signal yn_0_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal yn_0_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal yn_0_V_1_sel_rd : STD_LOGIC := '0';
    signal yn_0_V_1_sel_wr : STD_LOGIC := '0';
    signal yn_0_V_1_sel : STD_LOGIC;
    signal yn_0_V_1_load_A : STD_LOGIC;
    signal yn_0_V_1_load_B : STD_LOGIC;
    signal yn_0_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yn_0_V_1_state_cmp_full : STD_LOGIC;
    signal yn_1_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal yn_1_V_1_vld_in : STD_LOGIC;
    signal yn_1_V_1_vld_out : STD_LOGIC;
    signal yn_1_V_1_ack_in : STD_LOGIC;
    signal yn_1_V_1_ack_out : STD_LOGIC;
    signal yn_1_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal yn_1_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal yn_1_V_1_sel_rd : STD_LOGIC := '0';
    signal yn_1_V_1_sel_wr : STD_LOGIC := '0';
    signal yn_1_V_1_sel : STD_LOGIC;
    signal yn_1_V_1_load_A : STD_LOGIC;
    signal yn_1_V_1_load_B : STD_LOGIC;
    signal yn_1_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yn_1_V_1_state_cmp_full : STD_LOGIC;
    signal delay_ptr_V : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal xn_0_V_TDATA_blk_n : STD_LOGIC;
    signal yn_0_V_TDATA_blk_n : STD_LOGIC;
    signal exitcond_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tweeter_enabled_load_reg_1799 : STD_LOGIC_VECTOR (0 downto 0);
    signal yn_1_V_TDATA_blk_n : STD_LOGIC;
    signal buf_clr_read_read_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal woofer_enabled_load_reg_1848 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_768 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_773 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_778 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_783 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_1080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filter_c_engine_fu_720_ap_idle : STD_LOGIC;
    signal grp_filter_c_engine_fu_720_ap_ready : STD_LOGIC;
    signal grp_filter_c_engine_fu_720_ap_done : STD_LOGIC;
    signal ap_predicate_op269_write_state23 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal newSel4_fu_1341_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_cfg_filt_en_load_phi_phi_fu_658_p24 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_788 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_793 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_cast_fu_1170_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_798 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_cast1_fu_1259_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_803 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1440_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_808 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_814 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_819 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_cast1_fu_1162_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_824 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_cast_fu_1263_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_cast_fu_1436_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state34_io : BOOLEAN;
    signal xn_woofer_V_3_fu_1072_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal reg_834 : STD_LOGIC_VECTOR (23 downto 0);
    signal reg_839 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_reg_1641 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1719 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_1724 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_cast2_fu_1166_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1105_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_3_reg_1729 : STD_LOGIC_VECTOR (3 downto 0);
    signal newSel4_reg_1785 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filter_c_engine_fu_720_ap_start : STD_LOGIC;
    signal grp_filter_c_engine_fu_720_buf_xn_2_V_read : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_filter_c_engine_fu_720_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_filter_c_engine_fu_720_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_filter_c_engine_fu_720_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_filter_c_engine_fu_720_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_filter_c_engine_fu_720_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_filter_c_engine_fu_720_ap_ce : STD_LOGIC;
    signal xn_woofer_V_3_xn_woo_fu_1116_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_mux_p_051_1_phi_fu_628_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_051_1_reg_625 : STD_LOGIC_VECTOR (23 downto 0);
    signal xn_woofer_V_xn_woofe_fu_1123_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_065_1_reg_634 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_mux_i2_phi_fu_648_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_reg_644 : STD_LOGIC_VECTOR (3 downto 0);
    signal cfg_filt_en_load_phi_reg_655 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_reg_685 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_697 : STD_LOGIC_VECTOR (4 downto 0);
    signal i1_reg_709 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_1487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filter_c_engine_fu_720_ap_start_reg : STD_LOGIC := '0';
    signal addr_cast_fu_1111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr10_cast_fu_1194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr11_cast_fu_1205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr12_cast_fu_1216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr13_cast_fu_1227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr14_cast_fu_1237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr5_cast_fu_1362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr6_cast_fu_1373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr7_cast_fu_1384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr8_cast_fu_1395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr9_cast_fu_1405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr1_cast_fu_1446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr2_cast_fu_1467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_1472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr3_cast_fu_1482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr4_cast_fu_1509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1096_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tweeter_enabled_fu_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal xn_0_gain_V_1_fu_210 : STD_LOGIC_VECTOR (23 downto 0);
    signal woofer_enabled_fu_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal xn_woofer_V_2_fu_218 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state35 : BOOLEAN;
    signal ap_predicate_op329_write_state35 : BOOLEAN;
    signal ap_block_state35_io : BOOLEAN;
    signal p_Val2_s_fu_1514_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_22_fu_869_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_fu_893_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_886_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_920_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_9_fu_935_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal carry_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_913_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_956_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_fu_853_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_976_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_demorgan_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_mux_fu_1056_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_2_37_fu_1064_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1096_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_cast_fu_1102_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1105_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_cast1_fu_1457_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_fu_1102_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_1499_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1105_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_876_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal addr_cast_fu_1111_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal addr10_cast_fu_1194_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr11_cast_fu_1205_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal addr12_cast_fu_1216_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal addr13_cast_fu_1227_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal addr14_cast_fu_1237_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp8_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_1303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_1297_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel1_fu_1309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_1315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_1335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel3_fu_1327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_1321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr5_cast_fu_1362_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal addr6_cast_fu_1373_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal addr7_cast_fu_1384_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal addr8_cast_fu_1395_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal addr9_cast_fu_1405_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1440_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr1_cast_fu_1446_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal addr2_cast_fu_1467_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal addr3_cast_fu_1482_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal addr4_cast_fu_1509_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_s_fu_1514_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1096_ap_start : STD_LOGIC;
    signal grp_fu_1096_ap_done : STD_LOGIC;
    signal grp_fu_1096_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_Val2_s_fu_1514_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_condition_1341 : BOOLEAN;
    signal ap_condition_410 : BOOLEAN;
    signal ap_condition_1349 : BOOLEAN;
    signal ap_condition_1353 : BOOLEAN;
    signal ap_condition_1358 : BOOLEAN;
    signal ap_condition_110 : BOOLEAN;
    signal ap_condition_115 : BOOLEAN;
    signal ap_condition_120 : BOOLEAN;
    signal ap_condition_190 : BOOLEAN;
    signal ap_condition_195 : BOOLEAN;
    signal ap_condition_200 : BOOLEAN;
    signal ap_condition_267 : BOOLEAN;
    signal ap_condition_272 : BOOLEAN;
    signal ap_condition_277 : BOOLEAN;

    component filter_c_engine IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xn_0_V : IN STD_LOGIC_VECTOR (23 downto 0);
        coeff_gain_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        coeff_b0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        coeff_b1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        coeff_b2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        coeff_a1_n_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        coeff_a2_n_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_yn_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        buf_yn_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        buf_xn_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        buf_xn_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component filter_c_top_urembkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component filter_c_top_mul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    grp_filter_c_engine_fu_720 : component filter_c_engine
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_filter_c_engine_fu_720_ap_start,
        ap_done => grp_filter_c_engine_fu_720_ap_done,
        ap_idle => grp_filter_c_engine_fu_720_ap_idle,
        ap_ready => grp_filter_c_engine_fu_720_ap_ready,
        xn_0_V => reg_824,
        coeff_gain_V_read => reg_768,
        coeff_b0_V_read => reg_773,
        coeff_b1_V_read => reg_778,
        coeff_b2_V_read => reg_788,
        coeff_a1_n_V_read => reg_798,
        coeff_a2_n_V_read => reg_814,
        buf_yn_1_V_read => reg_819,
        buf_yn_2_V_read => reg_793,
        buf_xn_1_V_read => reg_803,
        buf_xn_2_V_read => grp_filter_c_engine_fu_720_buf_xn_2_V_read,
        ap_return_0 => grp_filter_c_engine_fu_720_ap_return_0,
        ap_return_1 => grp_filter_c_engine_fu_720_ap_return_1,
        ap_return_2 => grp_filter_c_engine_fu_720_ap_return_2,
        ap_return_3 => grp_filter_c_engine_fu_720_ap_return_3,
        ap_return_4 => grp_filter_c_engine_fu_720_ap_return_4,
        ap_ce => grp_filter_c_engine_fu_720_ap_ce);

    filter_c_top_urembkb_U12 : component filter_c_top_urembkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1096_ap_start,
        done => grp_fu_1096_ap_done,
        din0 => grp_fu_1096_p0,
        din1 => cfg_delay_val_V,
        ce => grp_fu_1096_ce,
        dout => grp_fu_1096_p2);

    filter_c_top_mul_cud_U13 : component filter_c_top_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 6,
        dout_WIDTH => 30)
    port map (
        din0 => xn_0_V_0_data_out,
        din1 => p_Val2_s_fu_1514_p1,
        dout => p_Val2_s_fu_1514_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state35_io) or (yn_1_V_1_ack_in = ap_const_logic_0) or (yn_0_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state35 = ap_CS_fsm))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    delay_ptr_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                delay_ptr_V <= ap_const_lv5_0;
            else
                if ((ap_const_logic_1 = ap_ce)) then
                    if (((exitcond1_fu_1247_p2 = ap_const_lv1_1) and (ap_ST_fsm_state36 = ap_CS_fsm))) then 
                        delay_ptr_V <= ap_const_lv5_0;
                    elsif (((tmp_5_reg_1641 = ap_const_lv1_0) and (ap_ST_fsm_state10 = ap_CS_fsm))) then 
                        delay_ptr_V <= grp_fu_1096_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    grp_filter_c_engine_fu_720_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_filter_c_engine_fu_720_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state18 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state29 = ap_CS_fsm)))) then 
                    grp_filter_c_engine_fu_720_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_filter_c_engine_fu_720_ap_ready = ap_const_logic_1)) then 
                    grp_filter_c_engine_fu_720_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    xn_0_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xn_0_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_ce) and (xn_0_V_0_ack_out = ap_const_logic_1) and (xn_0_V_0_vld_out = ap_const_logic_1))) then 
                                        xn_0_V_0_sel_rd <= not(xn_0_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xn_0_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xn_0_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_ce) and (xn_0_V_0_ack_in = ap_const_logic_1) and (xn_0_V_0_vld_in = ap_const_logic_1))) then 
                                        xn_0_V_0_sel_wr <= not(xn_0_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xn_0_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xn_0_V_0_state <= ap_const_lv2_0;
            else
                if ((ap_const_logic_1 = ap_ce)) then
                    if ((ap_const_boolean_1 = ap_condition_120)) then 
                        xn_0_V_0_state <= ap_const_lv2_2;
                    elsif ((ap_const_boolean_1 = ap_condition_115)) then 
                        xn_0_V_0_state <= ap_const_lv2_1;
                    elsif ((ap_const_boolean_1 = ap_condition_110)) then 
                        xn_0_V_0_state <= ap_const_lv2_3;
                    else 
                        xn_0_V_0_state <= ap_const_lv2_2;
                    end if;
                else 
                    xn_0_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yn_0_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yn_0_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_ce) and (yn_0_V_1_ack_out = ap_const_logic_1) and (yn_0_V_1_vld_out = ap_const_logic_1))) then 
                                        yn_0_V_1_sel_rd <= not(yn_0_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yn_0_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yn_0_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_ce) and (yn_0_V_1_ack_in = ap_const_logic_1) and (yn_0_V_1_vld_in = ap_const_logic_1))) then 
                                        yn_0_V_1_sel_wr <= not(yn_0_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yn_0_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yn_0_V_1_state <= ap_const_lv2_0;
            else
                if ((ap_const_logic_1 = ap_ce)) then
                    if ((ap_const_boolean_1 = ap_condition_200)) then 
                        yn_0_V_1_state <= ap_const_lv2_2;
                    elsif ((ap_const_boolean_1 = ap_condition_195)) then 
                        yn_0_V_1_state <= ap_const_lv2_1;
                    elsif ((ap_const_boolean_1 = ap_condition_190)) then 
                        yn_0_V_1_state <= ap_const_lv2_3;
                    else 
                        yn_0_V_1_state <= ap_const_lv2_2;
                    end if;
                else 
                    yn_0_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yn_1_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yn_1_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_ce) and (yn_1_V_1_ack_out = ap_const_logic_1) and (yn_1_V_1_vld_out = ap_const_logic_1))) then 
                                        yn_1_V_1_sel_rd <= not(yn_1_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yn_1_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yn_1_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_ce) and (yn_1_V_1_ack_in = ap_const_logic_1) and (yn_1_V_1_vld_in = ap_const_logic_1))) then 
                                        yn_1_V_1_sel_wr <= not(yn_1_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yn_1_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yn_1_V_1_state <= ap_const_lv2_0;
            else
                if ((ap_const_logic_1 = ap_ce)) then
                    if ((ap_const_boolean_1 = ap_condition_277)) then 
                        yn_1_V_1_state <= ap_const_lv2_2;
                    elsif ((ap_const_boolean_1 = ap_condition_272)) then 
                        yn_1_V_1_state <= ap_const_lv2_1;
                    elsif ((ap_const_boolean_1 = ap_condition_267)) then 
                        yn_1_V_1_state <= ap_const_lv2_3;
                    else 
                        yn_1_V_1_state <= ap_const_lv2_2;
                    end if;
                else 
                    yn_1_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    cfg_filt_en_load_phi_reg_655_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_410)) then
                if ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_0)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_0;
                elsif ((ap_const_boolean_1 = ap_condition_1341)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_11;
                elsif ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_A)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_10;
                elsif ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_9)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_9;
                elsif ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_8)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_8;
                elsif ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_7)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_7;
                elsif ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_6)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_6;
                elsif ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_5)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_5;
                elsif ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_4)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_4;
                elsif ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_3)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_3;
                elsif ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_2)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_2;
                elsif ((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_1)) then 
                    cfg_filt_en_load_phi_reg_655 <= cfg_filt_en_1;
                end if;
            end if; 
        end if;
    end process;

    i1_reg_709_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((exitcond2_fu_1487_p2 = ap_const_lv1_0) and (ap_ST_fsm_state40 = ap_CS_fsm))) then 
                    i1_reg_709 <= grp_fu_1440_p2;
                elsif (((exitcond1_fu_1247_p2 = ap_const_lv1_1) and (ap_ST_fsm_state36 = ap_CS_fsm))) then 
                    i1_reg_709 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    i2_reg_644_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_ST_fsm_state22 = ap_CS_fsm)) then 
                    i2_reg_644 <= i_3_reg_1729;
                elsif ((ap_ST_fsm_state10 = ap_CS_fsm)) then 
                    i2_reg_644 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    i3_reg_685_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((exitcond3_fu_1146_p2 = ap_const_lv1_1) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
                    i3_reg_685 <= ap_const_lv5_C;
                elsif ((ap_ST_fsm_state33 = ap_CS_fsm)) then 
                    i3_reg_685 <= grp_fu_1440_p2;
                end if;
            end if; 
        end if;
    end process;

    i_reg_697_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_boolean_1 = ap_condition_1349)) then 
                    i_reg_697 <= ap_const_lv5_0;
                elsif ((ap_ST_fsm_state39 = ap_CS_fsm)) then 
                    i_reg_697 <= reg_808;
                end if;
            end if; 
        end if;
    end process;

    p_051_1_reg_625_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_boolean_1 = ap_condition_1353)) then 
                    p_051_1_reg_625 <= xn_woofer_V_3_fu_1072_p3;
                elsif (((tmp_5_reg_1641 = ap_const_lv1_0) and (ap_ST_fsm_state10 = ap_CS_fsm))) then 
                    p_051_1_reg_625 <= xn_woofer_V_3_xn_woo_fu_1116_p3;
                end if;
            end if; 
        end if;
    end process;

    p_065_1_reg_634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_boolean_1 = ap_condition_1353)) then 
                    p_065_1_reg_634 <= xn_woofer_V_3_fu_1072_p3;
                elsif (((tmp_5_reg_1641 = ap_const_lv1_0) and (ap_ST_fsm_state10 = ap_CS_fsm))) then 
                    p_065_1_reg_634 <= xn_woofer_V_xn_woofe_fu_1123_p3;
                end if;
            end if; 
        end if;
    end process;

    reg_1719_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_ST_fsm_state13 = ap_CS_fsm)) then 
                                        reg_1719(5 downto 0) <= addr10_cast_fu_1194_p1(7 - 1 downto 0)(5 downto 0);
                elsif ((ap_ST_fsm_state24 = ap_CS_fsm)) then 
                                        reg_1719(5 downto 0) <= addr5_cast_fu_1362_p1(7 - 1 downto 0)(5 downto 0);
                end if;
            end if; 
        end if;
    end process;

    reg_1724_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((exitcond3_fu_1146_p2 = ap_const_lv1_0) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
                    reg_1724 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_cast2_fu_1166_p1),7));
                elsif ((ap_ST_fsm_state14 = ap_CS_fsm)) then 
                    reg_1724 <= addr11_cast_fu_1205_p1(7 - 1 downto 0);
                elsif ((ap_ST_fsm_state25 = ap_CS_fsm)) then 
                    reg_1724 <= addr6_cast_fu_1373_p1(7 - 1 downto 0);
                end if;
            end if; 
        end if;
    end process;

    reg_783_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state17 = ap_CS_fsm))) then 
                reg_783 <= addr14_cast_fu_1237_p1;
            elsif (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state25 = ap_CS_fsm))) then 
                reg_783 <= addr6_cast_fu_1373_p1;
            elsif (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state26 = ap_CS_fsm))) then 
                reg_783 <= addr7_cast_fu_1384_p1;
            elsif (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state27 = ap_CS_fsm))) then 
                reg_783 <= addr8_cast_fu_1395_p1;
            elsif (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state28 = ap_CS_fsm))) then 
                reg_783 <= addr9_cast_fu_1405_p1;
            elsif (((exitcond3_fu_1146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
                reg_783 <= tmp_11_fu_1158_p1;
            elsif (((ap_phi_mux_cfg_filt_en_load_phi_phi_fu_658_p24 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state12 = ap_CS_fsm))) then 
                reg_783 <= reg_783;
            elsif (((newSel4_fu_1341_p3 = ap_const_lv1_1) and (exitcond_fu_1424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm))) then 
                reg_783 <= tmp_12_fu_1253_p1;
            elsif (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state24 = ap_CS_fsm))) then 
                reg_783 <= addr5_cast_fu_1362_p1;
            elsif ((((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state19 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state30 = ap_CS_fsm)))) then 
                reg_783 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_filter_c_engine_fu_720_ap_return_3),64));
            elsif ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state18 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state29 = ap_CS_fsm)))) then 
                reg_783 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_q0),64));
            elsif (((tmp_5_fu_1080_p2 = ap_const_lv1_0) and (buf_clr = ap_const_lv1_0) and (xn_0_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state2 = ap_CS_fsm))) then 
                reg_783 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(delay_ptr_V),64));
            elsif (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state13 = ap_CS_fsm))) then 
                reg_783 <= addr10_cast_fu_1194_p1;
            elsif (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state14 = ap_CS_fsm))) then 
                reg_783 <= addr11_cast_fu_1205_p1;
            elsif (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state16 = ap_CS_fsm))) then 
                reg_783 <= addr13_cast_fu_1227_p1;
            elsif (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state15 = ap_CS_fsm))) then 
                reg_783 <= addr12_cast_fu_1216_p1;
            end if; 
        end if;
    end process;

    reg_798_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state17 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state28 = ap_CS_fsm)))) then 
                reg_798 <= coeff_mem_q0;
            elsif (((exitcond_fu_1424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm))) then 
                reg_798 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_cast1_fu_1259_p1),16));
            elsif (((exitcond3_fu_1146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
                reg_798 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_cast_fu_1170_p1),16));
            end if; 
        end if;
    end process;

    reg_824_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((buf_clr = ap_const_lv1_0) and (xn_0_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state2 = ap_CS_fsm))) then 
                reg_824 <= xn_woofer_V_3_fu_1072_p3;
            elsif (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state40 = ap_CS_fsm))) then 
                reg_824 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1440_p2),24));
            elsif (((exitcond1_fu_1247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state36 = ap_CS_fsm))) then 
                reg_824 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_cast_fu_1436_p1),24));
            elsif ((((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state19 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state30 = ap_CS_fsm)))) then 
                reg_824 <= grp_filter_c_engine_fu_720_ap_return_2;
            elsif ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state18 = ap_CS_fsm)) or ((ap_predicate_op269_write_state23 = ap_const_boolean_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm)))) then 
                reg_824 <= xn_0_gain_V_1_fu_210;
            elsif ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state29 = ap_CS_fsm)) or ((woofer_enabled_fu_214 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state34_io) and (ap_ST_fsm_state34 = ap_CS_fsm)))) then 
                reg_824 <= xn_woofer_V_2_fu_218;
            elsif (((exitcond_fu_1424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm))) then 
                reg_824 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_cast_fu_1263_p1),24));
            elsif (((exitcond3_fu_1146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
                reg_824 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_cast1_fu_1162_p1),24));
            end if; 
        end if;
    end process;

    reg_834_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state9 = ap_CS_fsm))) then 
                reg_834 <= addr_cast_fu_1111_p1(24 - 1 downto 0);
            elsif ((((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state19 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state30 = ap_CS_fsm)))) then 
                reg_834 <= grp_filter_c_engine_fu_720_ap_return_4;
            elsif (((newSel4_fu_1341_p3 = ap_const_lv1_1) and (exitcond_fu_1424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm))) then 
                reg_834 <= tmp_12_fu_1253_p1(24 - 1 downto 0);
            elsif (((ap_phi_mux_cfg_filt_en_load_phi_phi_fu_658_p24 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state12 = ap_CS_fsm))) then 
                reg_834 <= reg_783(24 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_839_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_ST_fsm_state26 = ap_CS_fsm)) then 
                    reg_839 <= addr7_cast_fu_1384_p1(7 - 1 downto 0);
                elsif ((ap_ST_fsm_state15 = ap_CS_fsm)) then 
                    reg_839 <= addr12_cast_fu_1216_p1(7 - 1 downto 0);
                elsif (((xn_0_V_0_vld_out = ap_const_logic_1) and (ap_ST_fsm_state2 = ap_CS_fsm))) then 
                    reg_839 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cfg_delay_val_V),7));
                end if;
            end if; 
        end if;
    end process;

    tweeter_enabled_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((ap_phi_mux_cfg_filt_en_load_phi_phi_fu_658_p24 = ap_const_lv1_1) and (ap_ST_fsm_state12 = ap_CS_fsm))) then 
                    tweeter_enabled_fu_206 <= ap_const_lv1_1;
                elsif ((ap_ST_fsm_state10 = ap_CS_fsm)) then 
                    tweeter_enabled_fu_206 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    woofer_enabled_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_boolean_1 = ap_condition_1358)) then 
                    woofer_enabled_fu_214 <= ap_const_lv1_1;
                elsif (((exitcond3_fu_1146_p2 = ap_const_lv1_1) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
                    woofer_enabled_fu_214 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    xn_0_gain_V_1_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state19 = ap_CS_fsm))) then 
                    xn_0_gain_V_1_fu_210 <= grp_filter_c_engine_fu_720_ap_return_0;
                elsif ((ap_ST_fsm_state10 = ap_CS_fsm)) then 
                    xn_0_gain_V_1_fu_210 <= ap_phi_mux_p_051_1_phi_fu_628_p4;
                end if;
            end if; 
        end if;
    end process;

    xn_woofer_V_2_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state30 = ap_CS_fsm))) then 
                    xn_woofer_V_2_fu_218 <= grp_filter_c_engine_fu_720_ap_return_0;
                elsif (((exitcond3_fu_1146_p2 = ap_const_lv1_1) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
                    xn_woofer_V_2_fu_218 <= p_065_1_reg_634;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state11 = ap_CS_fsm))) then
                i_3_reg_1729 <= grp_fu_1105_p2(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm))) then
                newSel4_reg_1785 <= newSel4_fu_1341_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state13 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state24 = ap_CS_fsm)))) then
                reg_768 <= coeff_mem_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state25 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state14 = ap_CS_fsm)))) then
                reg_773 <= coeff_mem_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state26 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state15 = ap_CS_fsm)))) then
                reg_778 <= coeff_mem_q0;
                reg_819 <= mem_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state27 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state16 = ap_CS_fsm)))) then
                reg_788 <= coeff_mem_q0;
                reg_793 <= mem_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state17 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state28 = ap_CS_fsm)))) then
                reg_803 <= mem_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state33 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state36 = ap_CS_fsm)) or ((tmp_5_fu_1080_p2 = ap_const_lv1_0) and (buf_clr = ap_const_lv1_0) and (xn_0_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state2 = ap_CS_fsm)))) then
                reg_808 <= grp_fu_1440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state18 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state29 = ap_CS_fsm)))) then
                reg_814 <= coeff_mem_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((buf_clr = ap_const_lv1_0) and (xn_0_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state2 = ap_CS_fsm))) then
                tmp_5_reg_1641 <= tmp_5_fu_1080_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1424_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm))) then
                tweeter_enabled_load_reg_1799 <= tweeter_enabled_fu_206;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state34_io) and (ap_ST_fsm_state34 = ap_CS_fsm))) then
                woofer_enabled_load_reg_1848 <= woofer_enabled_fu_214;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (xn_0_V_0_load_A = ap_const_logic_1))) then
                xn_0_V_0_payload_A <= xn_0_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (xn_0_V_0_load_B = ap_const_logic_1))) then
                xn_0_V_0_payload_B <= xn_0_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (yn_0_V_1_load_A = ap_const_logic_1))) then
                yn_0_V_1_payload_A <= xn_0_gain_V_1_fu_210;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (yn_0_V_1_load_B = ap_const_logic_1))) then
                yn_0_V_1_payload_B <= xn_0_gain_V_1_fu_210;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (yn_1_V_1_load_A = ap_const_logic_1))) then
                yn_1_V_1_payload_A <= xn_woofer_V_2_fu_218;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (yn_1_V_1_load_B = ap_const_logic_1))) then
                yn_1_V_1_payload_B <= xn_woofer_V_2_fu_218;
            end if;
        end if;
    end process;
    reg_1719(6) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_ce, ap_CS_fsm, buf_clr, xn_0_V_0_vld_out, yn_0_V_1_ack_in, yn_1_V_1_ack_in, exitcond_fu_1424_p2, buf_clr_read_read_fu_354_p2, tmp_5_fu_1080_p2, grp_filter_c_engine_fu_720_ap_done, ap_block_state23_io, newSel4_fu_1341_p3, ap_phi_mux_cfg_filt_en_load_phi_phi_fu_658_p24, exitcond3_fu_1146_p2, exitcond1_fu_1247_p2, ap_block_state34_io, exitcond2_fu_1487_p2, ap_block_state35_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state1 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((buf_clr_read_read_fu_354_p2 = ap_const_lv1_1) and (xn_0_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state2 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                elsif (((tmp_5_fu_1080_p2 = ap_const_lv1_1) and (buf_clr = ap_const_lv1_0) and (xn_0_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state2 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((tmp_5_fu_1080_p2 = ap_const_lv1_0) and (buf_clr = ap_const_lv1_0) and (xn_0_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state2 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_ST_fsm_state3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_ST_fsm_state4 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_ST_fsm_state5 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_ST_fsm_state6 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_ST_fsm_state7 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state8 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state9 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state10 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((exitcond3_fu_1146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state11 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((exitcond3_fu_1146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state11 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_phi_mux_cfg_filt_en_load_phi_phi_fu_658_p24 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state12 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                elsif (((ap_phi_mux_cfg_filt_en_load_phi_phi_fu_658_p24 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state12 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state13 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state14 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state15 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state16 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state17 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state18 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state19 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state20 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state21 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state22 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((exitcond_fu_1424_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                elsif (((newSel4_fu_1341_p3 = ap_const_lv1_0) and (exitcond_fu_1424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                elsif (((newSel4_fu_1341_p3 = ap_const_lv1_1) and (exitcond_fu_1424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state24 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state25 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state26 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state27 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state28 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state29 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state30 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state31 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state32 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state33 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state34_io) and (ap_ST_fsm_state34 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if ((not(((ap_const_boolean_1 = ap_block_state35_io) or (yn_1_V_1_ack_in = ap_const_logic_0) or (yn_0_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state35 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((exitcond1_fu_1247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state36 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((exitcond1_fu_1247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state36 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state37 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state38 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state39 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((exitcond2_fu_1487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state40 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                elsif (((exitcond2_fu_1487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state40 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_944_p2 <= "1" when (p_Result_9_fu_935_p4 = ap_const_lv4_F) else "0";
    Range1_all_zeros_fu_950_p2 <= "1" when (p_Result_9_fu_935_p4 = ap_const_lv4_0) else "0";
    Range2_all_ones_fu_929_p2 <= "1" when (p_Result_8_fu_920_p4 = ap_const_lv3_7) else "0";
    addr10_cast_fu_1194_p0 <= grp_fu_1105_p2(5 - 1 downto 0);
    addr10_cast_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr10_cast_fu_1194_p0),64));
    addr11_cast_fu_1205_p0 <= grp_fu_1105_p2(6 - 1 downto 0);
    addr11_cast_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr11_cast_fu_1205_p0),64));
    addr12_cast_fu_1216_p0 <= grp_fu_1105_p2(7 - 1 downto 0);
    addr12_cast_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr12_cast_fu_1216_p0),64));
    addr13_cast_fu_1227_p0 <= grp_fu_1105_p2(7 - 1 downto 0);
    addr13_cast_fu_1227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr13_cast_fu_1227_p0),64));
    addr14_cast_fu_1237_p0 <= grp_fu_1105_p2(7 - 1 downto 0);
    addr14_cast_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr14_cast_fu_1237_p0),64));
    addr1_cast_fu_1446_p0 <= grp_fu_1105_p2(6 - 1 downto 0);
    addr1_cast_fu_1446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr1_cast_fu_1446_p0),64));
    addr2_cast_fu_1467_p0 <= grp_fu_1105_p2(7 - 1 downto 0);
    addr2_cast_fu_1467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr2_cast_fu_1467_p0),64));
    addr3_cast_fu_1482_p0 <= grp_fu_1105_p2(6 - 1 downto 0);
    addr3_cast_fu_1482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr3_cast_fu_1482_p0),64));
    addr4_cast_fu_1509_p0 <= grp_fu_1105_p2(7 - 1 downto 0);
    addr4_cast_fu_1509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr4_cast_fu_1509_p0),64));
    addr5_cast_fu_1362_p0 <= grp_fu_1105_p2(6 - 1 downto 0);
    addr5_cast_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr5_cast_fu_1362_p0),64));
    addr6_cast_fu_1373_p0 <= grp_fu_1105_p2(6 - 1 downto 0);
    addr6_cast_fu_1373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr6_cast_fu_1373_p0),64));
    addr7_cast_fu_1384_p0 <= grp_fu_1105_p2(7 - 1 downto 0);
    addr7_cast_fu_1384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr7_cast_fu_1384_p0),64));
    addr8_cast_fu_1395_p0 <= grp_fu_1105_p2(7 - 1 downto 0);
    addr8_cast_fu_1395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr8_cast_fu_1395_p0),64));
    addr9_cast_fu_1405_p0 <= grp_fu_1105_p2(7 - 1 downto 0);
    addr9_cast_fu_1405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr9_cast_fu_1405_p0),64));
    addr_cast_fu_1111_p0 <= grp_fu_1105_p2(7 - 1 downto 0);
    addr_cast_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr_cast_fu_1111_p0),64));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state23_io_assign_proc : process(yn_0_V_1_ack_in, ap_predicate_op269_write_state23)
    begin
                ap_block_state23_io <= ((ap_predicate_op269_write_state23 = ap_const_boolean_1) and (yn_0_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state34_io_assign_proc : process(yn_0_V_1_ack_in, yn_1_V_1_ack_in, tweeter_enabled_load_reg_1799, woofer_enabled_fu_214)
    begin
                ap_block_state34_io <= (((woofer_enabled_fu_214 = ap_const_lv1_1) and (yn_1_V_1_ack_in = ap_const_logic_0)) or ((tweeter_enabled_load_reg_1799 = ap_const_lv1_1) and (yn_0_V_1_ack_in = ap_const_logic_0)));
    end process;


    ap_block_state35_assign_proc : process(yn_0_V_1_ack_in, yn_1_V_1_ack_in)
    begin
                ap_block_state35 <= ((yn_1_V_1_ack_in = ap_const_logic_0) or (yn_0_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state35_io_assign_proc : process(yn_1_V_1_ack_in, ap_predicate_op329_write_state35)
    begin
                ap_block_state35_io <= ((ap_predicate_op329_write_state35 = ap_const_boolean_1) and (yn_1_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_110_assign_proc : process(xn_0_V_0_vld_in, xn_0_V_0_ack_out, xn_0_V_0_state)
    begin
                ap_condition_110 <= ((not(((xn_0_V_0_vld_in = ap_const_logic_0) and (xn_0_V_0_ack_out = ap_const_logic_1))) and not(((xn_0_V_0_ack_out = ap_const_logic_0) and (xn_0_V_0_vld_in = ap_const_logic_1))) and (xn_0_V_0_state = ap_const_lv2_3)) or ((xn_0_V_0_state = ap_const_lv2_1) and (xn_0_V_0_ack_out = ap_const_logic_1)) or ((xn_0_V_0_state = ap_const_lv2_2) and (xn_0_V_0_vld_in = ap_const_logic_1)));
    end process;


    ap_condition_115_assign_proc : process(xn_0_V_0_vld_in, xn_0_V_0_ack_out, xn_0_V_0_state)
    begin
                ap_condition_115 <= (((xn_0_V_0_state = ap_const_lv2_1) and (xn_0_V_0_ack_out = ap_const_logic_0)) or ((xn_0_V_0_state = ap_const_lv2_3) and (xn_0_V_0_ack_out = ap_const_logic_0) and (xn_0_V_0_vld_in = ap_const_logic_1)));
    end process;


    ap_condition_120_assign_proc : process(xn_0_V_0_vld_in, xn_0_V_0_ack_out, xn_0_V_0_state)
    begin
                ap_condition_120 <= (((xn_0_V_0_state = ap_const_lv2_2) and (xn_0_V_0_vld_in = ap_const_logic_0)) or ((xn_0_V_0_state = ap_const_lv2_3) and (xn_0_V_0_vld_in = ap_const_logic_0) and (xn_0_V_0_ack_out = ap_const_logic_1)));
    end process;


    ap_condition_1341_assign_proc : process(ap_phi_mux_i2_phi_fu_648_p4)
    begin
                ap_condition_1341 <= (not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_0)) and not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_A)) and not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_9)) and not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_8)) and not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_7)) and not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_6)) and not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_5)) and not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_4)) and not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_3)) and not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_2)) and not((ap_phi_mux_i2_phi_fu_648_p4 = ap_const_lv4_1)));
    end process;


    ap_condition_1349_assign_proc : process(ap_CS_fsm, xn_0_V_0_vld_out, buf_clr_read_read_fu_354_p2)
    begin
                ap_condition_1349 <= ((buf_clr_read_read_fu_354_p2 = ap_const_lv1_1) and (xn_0_V_0_vld_out = ap_const_logic_1) and (ap_ST_fsm_state2 = ap_CS_fsm));
    end process;


    ap_condition_1353_assign_proc : process(ap_CS_fsm, buf_clr, xn_0_V_0_vld_out, tmp_5_fu_1080_p2)
    begin
                ap_condition_1353 <= ((tmp_5_fu_1080_p2 = ap_const_lv1_1) and (buf_clr = ap_const_lv1_0) and (xn_0_V_0_vld_out = ap_const_logic_1) and (ap_ST_fsm_state2 = ap_CS_fsm));
    end process;


    ap_condition_1358_assign_proc : process(ap_CS_fsm, exitcond_fu_1424_p2, ap_block_state23_io, newSel4_fu_1341_p3)
    begin
                ap_condition_1358 <= ((newSel4_fu_1341_p3 = ap_const_lv1_1) and (exitcond_fu_1424_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm));
    end process;


    ap_condition_190_assign_proc : process(yn_0_V_1_vld_in, yn_0_V_1_ack_out, yn_0_V_1_state)
    begin
                ap_condition_190 <= ((not(((yn_0_V_1_vld_in = ap_const_logic_0) and (yn_0_V_1_ack_out = ap_const_logic_1))) and not(((yn_0_V_1_ack_out = ap_const_logic_0) and (yn_0_V_1_vld_in = ap_const_logic_1))) and (yn_0_V_1_state = ap_const_lv2_3)) or ((yn_0_V_1_state = ap_const_lv2_1) and (yn_0_V_1_ack_out = ap_const_logic_1)) or ((yn_0_V_1_state = ap_const_lv2_2) and (yn_0_V_1_vld_in = ap_const_logic_1)));
    end process;


    ap_condition_195_assign_proc : process(yn_0_V_1_vld_in, yn_0_V_1_ack_out, yn_0_V_1_state)
    begin
                ap_condition_195 <= (((yn_0_V_1_state = ap_const_lv2_1) and (yn_0_V_1_ack_out = ap_const_logic_0)) or ((yn_0_V_1_state = ap_const_lv2_3) and (yn_0_V_1_ack_out = ap_const_logic_0) and (yn_0_V_1_vld_in = ap_const_logic_1)));
    end process;


    ap_condition_200_assign_proc : process(yn_0_V_1_vld_in, yn_0_V_1_ack_out, yn_0_V_1_state)
    begin
                ap_condition_200 <= (((yn_0_V_1_state = ap_const_lv2_2) and (yn_0_V_1_vld_in = ap_const_logic_0)) or ((yn_0_V_1_state = ap_const_lv2_3) and (yn_0_V_1_vld_in = ap_const_logic_0) and (yn_0_V_1_ack_out = ap_const_logic_1)));
    end process;


    ap_condition_267_assign_proc : process(yn_1_V_1_vld_in, yn_1_V_1_ack_out, yn_1_V_1_state)
    begin
                ap_condition_267 <= ((not(((yn_1_V_1_vld_in = ap_const_logic_0) and (yn_1_V_1_ack_out = ap_const_logic_1))) and not(((yn_1_V_1_ack_out = ap_const_logic_0) and (yn_1_V_1_vld_in = ap_const_logic_1))) and (yn_1_V_1_state = ap_const_lv2_3)) or ((yn_1_V_1_state = ap_const_lv2_1) and (yn_1_V_1_ack_out = ap_const_logic_1)) or ((yn_1_V_1_state = ap_const_lv2_2) and (yn_1_V_1_vld_in = ap_const_logic_1)));
    end process;


    ap_condition_272_assign_proc : process(yn_1_V_1_vld_in, yn_1_V_1_ack_out, yn_1_V_1_state)
    begin
                ap_condition_272 <= (((yn_1_V_1_state = ap_const_lv2_1) and (yn_1_V_1_ack_out = ap_const_logic_0)) or ((yn_1_V_1_state = ap_const_lv2_3) and (yn_1_V_1_ack_out = ap_const_logic_0) and (yn_1_V_1_vld_in = ap_const_logic_1)));
    end process;


    ap_condition_277_assign_proc : process(yn_1_V_1_vld_in, yn_1_V_1_ack_out, yn_1_V_1_state)
    begin
                ap_condition_277 <= (((yn_1_V_1_state = ap_const_lv2_2) and (yn_1_V_1_vld_in = ap_const_logic_0)) or ((yn_1_V_1_state = ap_const_lv2_3) and (yn_1_V_1_vld_in = ap_const_logic_0) and (yn_1_V_1_ack_out = ap_const_logic_1)));
    end process;


    ap_condition_410_assign_proc : process(ap_ce, ap_CS_fsm, exitcond3_fu_1146_p2)
    begin
                ap_condition_410 <= ((exitcond3_fu_1146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state11 = ap_CS_fsm));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_ce, ap_CS_fsm, yn_0_V_1_ack_in, yn_1_V_1_ack_in, ap_block_state35_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state35_io) or (yn_1_V_1_ack_in = ap_const_logic_0) or (yn_0_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state35 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_fsm_state1 = ap_CS_fsm) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_cfg_filt_en_load_phi_phi_fu_658_p24 <= cfg_filt_en_load_phi_reg_655;
    ap_phi_mux_i2_phi_fu_648_p4 <= i2_reg_644;

    ap_phi_mux_p_051_1_phi_fu_628_p4_assign_proc : process(ap_CS_fsm, tmp_5_reg_1641, xn_woofer_V_3_xn_woo_fu_1116_p3, p_051_1_reg_625)
    begin
        if (((tmp_5_reg_1641 = ap_const_lv1_0) and (ap_ST_fsm_state10 = ap_CS_fsm))) then 
            ap_phi_mux_p_051_1_phi_fu_628_p4 <= xn_woofer_V_3_xn_woo_fu_1116_p3;
        else 
            ap_phi_mux_p_051_1_phi_fu_628_p4 <= p_051_1_reg_625;
        end if; 
    end process;


    ap_predicate_op269_write_state23_assign_proc : process(exitcond_fu_1424_p2, tweeter_enabled_fu_206)
    begin
                ap_predicate_op269_write_state23 <= ((tweeter_enabled_fu_206 = ap_const_lv1_1) and (exitcond_fu_1424_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op329_write_state35_assign_proc : process(buf_clr, woofer_enabled_load_reg_1848)
    begin
                ap_predicate_op329_write_state35 <= ((woofer_enabled_load_reg_1848 = ap_const_lv1_1) and (buf_clr = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm, yn_0_V_1_ack_in, yn_1_V_1_ack_in, ap_block_state35_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state35_io) or (yn_1_V_1_ack_in = ap_const_logic_0) or (yn_0_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state35 = ap_CS_fsm))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_1014_p2 <= (newsignbit_fu_893_p3 and deleted_ones_fu_976_p3);
    brmerge_i_fu_996_p2 <= (p_not_i_fu_990_p2 or newsignbit_fu_893_p3);
    brmerge_i_i_fu_1038_p2 <= (underflow_fu_1032_p2 or overflow_fu_1008_p2);
    buf_clr_read_read_fu_354_p2 <= buf_clr;
    carry_fu_907_p2 <= (tmp_8_fu_901_p2 and tmp_23_fu_886_p3);

    coeff_mem_address0_assign_proc : process(ap_CS_fsm, reg_783, addr10_cast_fu_1194_p1, addr11_cast_fu_1205_p1, addr12_cast_fu_1216_p1, addr13_cast_fu_1227_p1, addr14_cast_fu_1237_p1, tmp_12_fu_1253_p1, addr5_cast_fu_1362_p1, addr6_cast_fu_1373_p1, addr7_cast_fu_1384_p1, addr8_cast_fu_1395_p1, addr9_cast_fu_1405_p1)
    begin
        if ((ap_ST_fsm_state28 = ap_CS_fsm)) then 
            coeff_mem_address0 <= addr9_cast_fu_1405_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state27 = ap_CS_fsm)) then 
            coeff_mem_address0 <= addr8_cast_fu_1395_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state26 = ap_CS_fsm)) then 
            coeff_mem_address0 <= addr7_cast_fu_1384_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state25 = ap_CS_fsm)) then 
            coeff_mem_address0 <= addr6_cast_fu_1373_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state24 = ap_CS_fsm)) then 
            coeff_mem_address0 <= addr5_cast_fu_1362_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state23 = ap_CS_fsm)) then 
            coeff_mem_address0 <= tmp_12_fu_1253_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state17 = ap_CS_fsm)) then 
            coeff_mem_address0 <= addr14_cast_fu_1237_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state16 = ap_CS_fsm)) then 
            coeff_mem_address0 <= addr13_cast_fu_1227_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state15 = ap_CS_fsm)) then 
            coeff_mem_address0 <= addr12_cast_fu_1216_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state14 = ap_CS_fsm)) then 
            coeff_mem_address0 <= addr11_cast_fu_1205_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state13 = ap_CS_fsm)) then 
            coeff_mem_address0 <= addr10_cast_fu_1194_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state12 = ap_CS_fsm)) then 
            coeff_mem_address0 <= reg_783(7 - 1 downto 0);
        else 
            coeff_mem_address0 <= "XXXXXXX";
        end if; 
    end process;


    coeff_mem_ce0_assign_proc : process(ap_ce, ap_CS_fsm, ap_block_state23_io)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state17 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state27 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state28 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state12 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state16 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state26 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state15 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state25 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state14 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state13 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state24 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm)))) then 
            coeff_mem_ce0 <= ap_const_logic_1;
        else 
            coeff_mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_976_p3 <= 
        p_41_i_fu_970_p2 when (carry_fu_907_p2(0) = '1') else 
        Range1_all_ones_fu_944_p2;
    deleted_zeros_fu_956_p3 <= 
        Range1_all_ones_fu_944_p2 when (carry_fu_907_p2(0) = '1') else 
        Range1_all_zeros_fu_950_p2;
    exitcond1_fu_1247_p2 <= "1" when (i_reg_697 = ap_const_lv5_12) else "0";
    exitcond2_fu_1487_p2 <= "1" when (i1_reg_709 = ap_const_lv5_18) else "0";
    exitcond3_fu_1146_p2 <= "1" when (i2_reg_644 = ap_const_lv4_C) else "0";
    exitcond_fu_1424_p2 <= "1" when (i3_reg_685 = ap_const_lv5_12) else "0";

    grp_filter_c_engine_fu_720_ap_ce_assign_proc : process(ap_ce, ap_CS_fsm)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm)))) then 
            grp_filter_c_engine_fu_720_ap_ce <= ap_const_logic_1;
        else 
            grp_filter_c_engine_fu_720_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_filter_c_engine_fu_720_ap_start <= grp_filter_c_engine_fu_720_ap_start_reg;
    grp_filter_c_engine_fu_720_buf_xn_2_V_read <= reg_783(24 - 1 downto 0);

    grp_fu_1096_ap_start_assign_proc : process(ap_ce, ap_CS_fsm, buf_clr, xn_0_V_0_vld_out, tmp_5_fu_1080_p2)
    begin
        if (((tmp_5_fu_1080_p2 = ap_const_lv1_0) and (buf_clr = ap_const_lv1_0) and (xn_0_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state2 = ap_CS_fsm))) then 
            grp_fu_1096_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1096_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1096_ce_assign_proc : process(ap_ce, ap_CS_fsm)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_ST_fsm_state7 = ap_CS_fsm) or (ap_ST_fsm_state6 = ap_CS_fsm) or (ap_ST_fsm_state5 = ap_CS_fsm) or (ap_ST_fsm_state4 = ap_CS_fsm) or (ap_ST_fsm_state3 = ap_CS_fsm) or (ap_ST_fsm_state2 = ap_CS_fsm) or (ap_ST_fsm_state10 = ap_CS_fsm) or (ap_ST_fsm_state9 = ap_CS_fsm) or (ap_ST_fsm_state8 = ap_CS_fsm)))) then 
            grp_fu_1096_ce <= ap_const_logic_1;
        else 
            grp_fu_1096_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1096_p0 <= std_logic_vector(unsigned(grp_fu_1440_p0) + unsigned(ap_const_lv5_1));

    grp_fu_1105_p0_assign_proc : process(ap_CS_fsm, reg_798, reg_824, tmp_9_cast_fu_1436_p1, reg_1724, i2_reg_644, p_Val2_s_fu_1514_p2, tmp_9_cast1_fu_1457_p1, tmp_7_cast_fu_1102_p1, tmp_cast_fu_1499_p1)
    begin
        if ((ap_ST_fsm_state40 = ap_CS_fsm)) then 
            grp_fu_1105_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_fu_1499_p1),24));
        elsif ((ap_ST_fsm_state37 = ap_CS_fsm)) then 
            grp_fu_1105_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_cast1_fu_1457_p1),24));
        elsif ((ap_ST_fsm_state36 = ap_CS_fsm)) then 
            grp_fu_1105_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_cast_fu_1436_p1),24));
        elsif (((ap_ST_fsm_state39 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm))) then 
            grp_fu_1105_p0 <= reg_824;
        elsif ((ap_ST_fsm_state14 = ap_CS_fsm)) then 
            grp_fu_1105_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1724),24));
        elsif (((ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm))) then 
            grp_fu_1105_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_798),24));
        elsif ((ap_ST_fsm_state11 = ap_CS_fsm)) then 
            grp_fu_1105_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_644),24));
        elsif ((ap_ST_fsm_state9 = ap_CS_fsm)) then 
            grp_fu_1105_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_fu_1102_p1),24));
        elsif ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            grp_fu_1105_p0 <= p_Val2_s_fu_1514_p2(25 downto 2);
        else 
            grp_fu_1105_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1105_p1_assign_proc : process(ap_CS_fsm, tmp_3_fu_876_p1)
    begin
        if (((ap_ST_fsm_state39 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm))) then 
            grp_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv6_12),24));
        elsif (((ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm))) then 
            grp_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv7_5A),24));
        elsif (((ap_ST_fsm_state37 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm))) then 
            grp_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv7_36),24));
        elsif (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm))) then 
            grp_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv6_24),24));
        elsif ((ap_ST_fsm_state13 = ap_CS_fsm)) then 
            grp_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv5_12),24));
        elsif ((ap_ST_fsm_state11 = ap_CS_fsm)) then 
            grp_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv4_1),24));
        elsif (((ap_ST_fsm_state40 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state9 = ap_CS_fsm))) then 
            grp_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv7_48),24));
        elsif ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            grp_fu_1105_p1 <= tmp_3_fu_876_p1;
        else 
            grp_fu_1105_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1105_p2 <= std_logic_vector(unsigned(grp_fu_1105_p0) + unsigned(grp_fu_1105_p1));

    grp_fu_1440_p0_assign_proc : process(ap_CS_fsm, delay_ptr_V, i3_reg_685, i_reg_697, i1_reg_709)
    begin
        if ((ap_ST_fsm_state40 = ap_CS_fsm)) then 
            grp_fu_1440_p0 <= i1_reg_709;
        elsif ((ap_ST_fsm_state36 = ap_CS_fsm)) then 
            grp_fu_1440_p0 <= i_reg_697;
        elsif ((ap_ST_fsm_state33 = ap_CS_fsm)) then 
            grp_fu_1440_p0 <= i3_reg_685;
        elsif ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            grp_fu_1440_p0 <= delay_ptr_V;
        else 
            grp_fu_1440_p0 <= "XXXXX";
        end if; 
    end process;

    grp_fu_1440_p2 <= std_logic_vector(unsigned(grp_fu_1440_p0) + unsigned(ap_const_lv5_1));

    mem_address0_assign_proc : process(ap_CS_fsm, reg_834, reg_839, reg_1719, reg_1724, addr_cast_fu_1111_p1, addr1_cast_fu_1446_p1, addr2_cast_fu_1467_p1, tmp_9_fu_1472_p1, addr3_cast_fu_1482_p1, addr4_cast_fu_1509_p1)
    begin
        if ((ap_ST_fsm_state40 = ap_CS_fsm)) then 
            mem_address0 <= addr4_cast_fu_1509_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state39 = ap_CS_fsm)) then 
            mem_address0 <= addr3_cast_fu_1482_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state38 = ap_CS_fsm)) then 
            mem_address0 <= tmp_9_fu_1472_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state37 = ap_CS_fsm)) then 
            mem_address0 <= addr2_cast_fu_1467_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state36 = ap_CS_fsm)) then 
            mem_address0 <= addr1_cast_fu_1446_p1(7 - 1 downto 0);
        elsif (((ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm))) then 
            mem_address0 <= reg_839;
        elsif (((ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm))) then 
            mem_address0 <= reg_1724;
        elsif (((ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm))) then 
            mem_address0 <= reg_1719;
        elsif (((ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state10 = ap_CS_fsm))) then 
            mem_address0 <= reg_834(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state9 = ap_CS_fsm)) then 
            mem_address0 <= addr_cast_fu_1111_p1(7 - 1 downto 0);
        else 
            mem_address0 <= "XXXXXXX";
        end if; 
    end process;


    mem_ce0_assign_proc : process(ap_ce, ap_CS_fsm, grp_filter_c_engine_fu_720_ap_done)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state32 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state31 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state21 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state20 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state38 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state37 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state39 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state22 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state10 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state9 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state40 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state33 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state36 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state17 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state27 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state28 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state19 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state30 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state16 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state26 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state15 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state25 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state14 = ap_CS_fsm)))) then 
            mem_ce0 <= ap_const_logic_1;
        else 
            mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_d0_assign_proc : process(ap_CS_fsm, reg_783, reg_824, reg_834, grp_filter_c_engine_fu_720_ap_return_1)
    begin
        if (((ap_ST_fsm_state40 = ap_CS_fsm) or (ap_ST_fsm_state39 = ap_CS_fsm) or (ap_ST_fsm_state38 = ap_CS_fsm) or (ap_ST_fsm_state37 = ap_CS_fsm) or (ap_ST_fsm_state36 = ap_CS_fsm))) then 
            mem_d0 <= ap_const_lv24_0;
        elsif (((ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm))) then 
            mem_d0 <= reg_834;
        elsif (((ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm))) then 
            mem_d0 <= reg_783(24 - 1 downto 0);
        elsif (((ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm))) then 
            mem_d0 <= grp_filter_c_engine_fu_720_ap_return_1;
        elsif (((ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state10 = ap_CS_fsm))) then 
            mem_d0 <= reg_824;
        else 
            mem_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_we0_assign_proc : process(ap_ce, ap_CS_fsm, grp_filter_c_engine_fu_720_ap_done, exitcond1_fu_1247_p2, tmp_5_reg_1641, newSel4_reg_1785, cfg_filt_en_load_phi_reg_655, exitcond2_fu_1487_p2)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state32 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state31 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state21 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state20 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state38 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state37 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state39 = ap_CS_fsm)) or ((cfg_filt_en_load_phi_reg_655 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state22 = ap_CS_fsm)) or ((tmp_5_reg_1641 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state10 = ap_CS_fsm)) or ((exitcond2_fu_1487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state40 = ap_CS_fsm)) or ((newSel4_reg_1785 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state33 = ap_CS_fsm)) or ((exitcond1_fu_1247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state36 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state19 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_ce) and (grp_filter_c_engine_fu_720_ap_done = ap_const_logic_1) and (ap_ST_fsm_state30 = ap_CS_fsm)))) then 
            mem_we0 <= ap_const_logic_1;
        else 
            mem_we0 <= ap_const_logic_0;
        end if; 
    end process;

    newSel1_fu_1309_p3 <= 
        cfg_filt_en_15 when (sel_tmp4_fu_1279_p2(0) = '1') else 
        cfg_filt_en_14;
    newSel2_fu_1321_p3 <= 
        cfg_filt_en_13 when (sel_tmp_fu_1267_p2(0) = '1') else 
        cfg_filt_en_17;
    newSel3_fu_1327_p3 <= 
        newSel_fu_1297_p3 when (or_cond_fu_1303_p2(0) = '1') else 
        newSel1_fu_1309_p3;
    newSel4_fu_1341_p3 <= 
        newSel3_fu_1327_p3 when (or_cond2_fu_1335_p2(0) = '1') else 
        newSel2_fu_1321_p3;
    newSel_fu_1297_p3 <= 
        cfg_filt_en_12 when (sel_tmp8_fu_1291_p2(0) = '1') else 
        cfg_filt_en_16;
    newsignbit_fu_893_p3 <= grp_fu_1105_p2(23 downto 23);
    or_cond1_fu_1315_p2 <= (sel_tmp4_fu_1279_p2 or sel_tmp2_fu_1273_p2);
    or_cond2_fu_1335_p2 <= (or_cond_fu_1303_p2 or or_cond1_fu_1315_p2);
    or_cond_fu_1303_p2 <= (sel_tmp8_fu_1291_p2 or sel_tmp6_fu_1285_p2);
    overflow_fu_1008_p2 <= (tmp_4_fu_1002_p2 and brmerge_i_fu_996_p2);
    p_38_i_fu_984_p2 <= (carry_fu_907_p2 and Range1_all_ones_fu_944_p2);
    p_41_i_fu_970_p2 <= (tmp_6_fu_964_p2 and Range2_all_ones_fu_929_p2);
    p_Result_8_fu_920_p4 <= p_Val2_s_fu_1514_p2(29 downto 27);
    p_Result_9_fu_935_p4 <= p_Val2_s_fu_1514_p2(29 downto 26);
    p_Val2_2_37_fu_1064_p3 <= 
        ap_const_lv24_800000 when (underflow_fu_1032_p2(0) = '1') else 
        grp_fu_1105_p2;
    p_Val2_2_mux_fu_1056_p3 <= 
        ap_const_lv24_7FFFFF when (brmerge_i_i_fu_1038_p2(0) = '1') else 
        grp_fu_1105_p2;
    p_Val2_s_fu_1514_p1 <= p_Val2_s_fu_1514_p10(6 - 1 downto 0);
    p_Val2_s_fu_1514_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cfg_gain_val_V),30));
    p_not_i_fu_990_p2 <= (deleted_zeros_fu_956_p3 xor ap_const_lv1_1);
    sel_tmp2_fu_1273_p2 <= "1" when (i3_reg_685 = ap_const_lv5_E) else "0";
    sel_tmp4_fu_1279_p2 <= "1" when (i3_reg_685 = ap_const_lv5_F) else "0";
    sel_tmp6_fu_1285_p2 <= "1" when (i3_reg_685 = ap_const_lv5_10) else "0";
    sel_tmp8_fu_1291_p2 <= "1" when (i3_reg_685 = ap_const_lv5_C) else "0";
    sel_tmp_fu_1267_p2 <= "1" when (i3_reg_685 = ap_const_lv5_D) else "0";
    signbit_fu_853_p3 <= p_Val2_s_fu_1514_p2(29 downto 29);
    tmp1_fu_1044_p2 <= (tmp_4_fu_1002_p2 or brmerge40_demorgan_i_fu_1014_p2);
    tmp_11_cast1_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_644),7));
    tmp_11_cast2_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_644),6));
    tmp_11_cast_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_644),5));
    tmp_11_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_644),64));
    tmp_12_cast1_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_685),7));
    tmp_12_cast_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_685),6));
    tmp_12_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_685),64));
    tmp_22_fu_869_p3 <= p_Val2_s_fu_1514_p2(1 downto 1);
    tmp_23_fu_886_p3 <= p_Val2_s_fu_1514_p2(25 downto 25);
    tmp_25_fu_913_p3 <= p_Val2_s_fu_1514_p2(26 downto 26);
    tmp_3_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_869_p3),24));
    tmp_4_fu_1002_p2 <= (signbit_fu_853_p3 xor ap_const_lv1_1);
    tmp_5_fu_1080_p2 <= "1" when (cfg_delay_val_V = ap_const_lv5_0) else "0";
    tmp_6_fu_964_p2 <= (tmp_25_fu_913_p3 xor ap_const_lv1_1);
    tmp_7_cast_fu_1102_p0 <= reg_783(5 - 1 downto 0);
    tmp_7_cast_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_fu_1102_p0),7));
    tmp_8_fu_901_p2 <= (newsignbit_fu_893_p3 xor ap_const_lv1_1);
    tmp_9_cast1_fu_1457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_697),7));
    tmp_9_cast_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_697),6));
    tmp_9_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_697),64));
    tmp_cast_fu_1499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_709),7));
    tmp_demorgan_fu_1020_p2 <= (p_38_i_fu_984_p2 or brmerge40_demorgan_i_fu_1014_p2);
    tmp_fu_1026_p2 <= (tmp_demorgan_fu_1020_p2 xor ap_const_lv1_1);
    underflow_fu_1032_p2 <= (tmp_fu_1026_p2 and signbit_fu_853_p3);
    underflow_not_fu_1050_p2 <= (tmp1_fu_1044_p2 or p_38_i_fu_984_p2);
    xn_0_V_0_ack_in <= xn_0_V_0_state(1);

    xn_0_V_0_ack_out_assign_proc : process(ap_ce, ap_CS_fsm, xn_0_V_0_vld_out)
    begin
        if (((xn_0_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state2 = ap_CS_fsm))) then 
            xn_0_V_0_ack_out <= ap_const_logic_1;
        else 
            xn_0_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    xn_0_V_0_data_out_assign_proc : process(xn_0_V_0_payload_A, xn_0_V_0_payload_B, xn_0_V_0_sel)
    begin
        if ((xn_0_V_0_sel = ap_const_logic_1)) then 
            xn_0_V_0_data_out <= xn_0_V_0_payload_B;
        else 
            xn_0_V_0_data_out <= xn_0_V_0_payload_A;
        end if; 
    end process;

    xn_0_V_0_load_A <= (xn_0_V_0_state_cmp_full and not(xn_0_V_0_sel_wr));
    xn_0_V_0_load_B <= (xn_0_V_0_state_cmp_full and xn_0_V_0_sel_wr);
    xn_0_V_0_sel <= xn_0_V_0_sel_rd;
    xn_0_V_0_state_cmp_full <= '0' when (xn_0_V_0_state = ap_const_lv2_1) else '1';
    xn_0_V_0_vld_in <= xn_0_V_TVALID;
    xn_0_V_0_vld_out <= xn_0_V_0_state(0);

    xn_0_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm, xn_0_V_0_state)
    begin
        if ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            xn_0_V_TDATA_blk_n <= xn_0_V_0_state(0);
        else 
            xn_0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xn_0_V_TREADY <= xn_0_V_0_state(1);
    xn_woofer_V_3_fu_1072_p3 <= 
        p_Val2_2_mux_fu_1056_p3 when (underflow_not_fu_1050_p2(0) = '1') else 
        p_Val2_2_37_fu_1064_p3;
    xn_woofer_V_3_xn_woo_fu_1116_p3 <= 
        reg_824 when (cfg_delay_sel(0) = '1') else 
        mem_q0;
    xn_woofer_V_xn_woofe_fu_1123_p3 <= 
        mem_q0 when (cfg_delay_sel(0) = '1') else 
        reg_824;
    yn_0_V_1_ack_in <= yn_0_V_1_state(1);
    yn_0_V_1_ack_out <= yn_0_V_TREADY;

    yn_0_V_1_data_out_assign_proc : process(yn_0_V_1_payload_A, yn_0_V_1_payload_B, yn_0_V_1_sel)
    begin
        if ((yn_0_V_1_sel = ap_const_logic_1)) then 
            yn_0_V_1_data_out <= yn_0_V_1_payload_B;
        else 
            yn_0_V_1_data_out <= yn_0_V_1_payload_A;
        end if; 
    end process;

    yn_0_V_1_load_A <= (yn_0_V_1_state_cmp_full and not(yn_0_V_1_sel_wr));
    yn_0_V_1_load_B <= (yn_0_V_1_state_cmp_full and yn_0_V_1_sel_wr);
    yn_0_V_1_sel <= yn_0_V_1_sel_rd;
    yn_0_V_1_state_cmp_full <= '0' when (yn_0_V_1_state = ap_const_lv2_1) else '1';

    yn_0_V_1_vld_in_assign_proc : process(ap_ce, ap_CS_fsm, ap_predicate_op269_write_state23, ap_block_state23_io)
    begin
        if (((ap_predicate_op269_write_state23 = ap_const_boolean_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state23_io) and (ap_ST_fsm_state23 = ap_CS_fsm))) then 
            yn_0_V_1_vld_in <= ap_const_logic_1;
        else 
            yn_0_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    yn_0_V_1_vld_out <= yn_0_V_1_state(0);
    yn_0_V_TDATA <= yn_0_V_1_data_out;

    yn_0_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm, yn_0_V_1_state, exitcond_fu_1424_p2, tweeter_enabled_load_reg_1799, tweeter_enabled_fu_206)
    begin
        if ((((tweeter_enabled_load_reg_1799 = ap_const_lv1_1) and (ap_ST_fsm_state34 = ap_CS_fsm)) or ((tweeter_enabled_fu_206 = ap_const_lv1_1) and (exitcond_fu_1424_p2 = ap_const_lv1_1) and (ap_ST_fsm_state23 = ap_CS_fsm)))) then 
            yn_0_V_TDATA_blk_n <= yn_0_V_1_state(1);
        else 
            yn_0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yn_0_V_TVALID <= yn_0_V_1_state(0);
    yn_1_V_1_ack_in <= yn_1_V_1_state(1);
    yn_1_V_1_ack_out <= yn_1_V_TREADY;

    yn_1_V_1_data_out_assign_proc : process(yn_1_V_1_payload_A, yn_1_V_1_payload_B, yn_1_V_1_sel)
    begin
        if ((yn_1_V_1_sel = ap_const_logic_1)) then 
            yn_1_V_1_data_out <= yn_1_V_1_payload_B;
        else 
            yn_1_V_1_data_out <= yn_1_V_1_payload_A;
        end if; 
    end process;

    yn_1_V_1_load_A <= (yn_1_V_1_state_cmp_full and not(yn_1_V_1_sel_wr));
    yn_1_V_1_load_B <= (yn_1_V_1_state_cmp_full and yn_1_V_1_sel_wr);
    yn_1_V_1_sel <= yn_1_V_1_sel_rd;
    yn_1_V_1_state_cmp_full <= '0' when (yn_1_V_1_state = ap_const_lv2_1) else '1';

    yn_1_V_1_vld_in_assign_proc : process(ap_ce, ap_CS_fsm, ap_block_state34_io, woofer_enabled_fu_214)
    begin
        if (((woofer_enabled_fu_214 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_state34_io) and (ap_ST_fsm_state34 = ap_CS_fsm))) then 
            yn_1_V_1_vld_in <= ap_const_logic_1;
        else 
            yn_1_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    yn_1_V_1_vld_out <= yn_1_V_1_state(0);
    yn_1_V_TDATA <= yn_1_V_1_data_out;

    yn_1_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm, buf_clr, yn_1_V_1_state, woofer_enabled_load_reg_1848, woofer_enabled_fu_214)
    begin
        if ((((woofer_enabled_load_reg_1848 = ap_const_lv1_1) and (buf_clr = ap_const_lv1_0) and (ap_ST_fsm_state35 = ap_CS_fsm)) or ((woofer_enabled_fu_214 = ap_const_lv1_1) and (ap_ST_fsm_state34 = ap_CS_fsm)))) then 
            yn_1_V_TDATA_blk_n <= yn_1_V_1_state(1);
        else 
            yn_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yn_1_V_TVALID <= yn_1_V_1_state(0);
end behav;
