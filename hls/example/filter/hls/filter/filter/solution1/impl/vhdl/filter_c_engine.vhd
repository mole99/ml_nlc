-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_c_engine is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xn_0_V : IN STD_LOGIC_VECTOR (23 downto 0);
    coeff_gain_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    coeff_b0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    coeff_b1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    coeff_b2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    coeff_a1_n_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    coeff_a2_n_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_yn_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    buf_yn_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    buf_xn_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    buf_xn_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of filter_c_engine is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv24_7FFFFF : STD_LOGIC_VECTOR (23 downto 0) := "011111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal reg_171 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal reg_178 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_444_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xn_0_scaled_V_reg_188 : STD_LOGIC_VECTOR (23 downto 0);
    signal reg_191 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_10_reg_808 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_1_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_164_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_17_cast_fu_487_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_20_cast_cast_fu_522_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp4_cast_fu_565_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_s_fu_616_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_cast_fu_502_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_18_cast_fu_236_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_21_cast_cast_fu_537_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_8_cast_fu_560_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_8_fu_273_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal OP2_V_fu_241_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP1_V_1_fu_477_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP1_V_2_fu_468_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP1_V_3_fu_492_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP1_V_4_fu_512_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP1_V_5_fu_527_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_fu_507_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP2_V_1_fu_472_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP2_V_2_fu_482_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP2_V_3_fu_497_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP2_V_4_fu_517_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP2_V_5_fu_532_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_228_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_cast_fu_236_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_228_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_306_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_322_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal carry_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_278_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_298_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_fu_265_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_demorgan_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_444_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_not_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_741_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_452_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_452_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal OP1_V_2_fu_468_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_cast_fu_487_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal OP1_V_4_fu_512_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_20_cast_cast_fu_522_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_10_fu_542_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_17_fu_552_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_8_cast_fu_560_p0 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp4_cast_fu_565_p0 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_11_fu_594_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_578_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_246_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_620_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i1_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i1_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_648_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i1_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_1_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_1_fu_665_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i1_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_demorgan_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_741_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_741_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_164_p00 : STD_LOGIC_VECTOR (23 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_fsm_state7 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                reg_171 <= grp_fu_164_p2(41 - 1 downto 0);
            elsif ((((ap_ST_fsm_state5 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce)) or ((ap_ST_fsm_state2 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce)))) then 
                reg_171 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_194_p2),41));
            end if; 
        end if;
    end process;

    reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_ST_fsm_state6 = ap_CS_fsm)) then 
                    reg_191 <= grp_fu_164_p2(41 - 1 downto 0);
                elsif ((ap_ST_fsm_state3 = ap_CS_fsm)) then 
                    reg_191 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_194_p2),41));
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state8 = ap_CS_fsm))) then
                Range1_all_ones_1_reg_829 <= Range1_all_ones_1_fu_588_p2;
                Range1_all_zeros_1_reg_836 <= Range1_all_zeros_1_fu_610_p2;
                Range2_all_ones_1_reg_824 <= Range2_all_ones_1_fu_604_p2;
                signbit_1_reg_818 <= grp_fu_164_p2(41 downto 41);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_fsm_state7 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                p_Val2_10_reg_808 <= p_Val2_10_fu_542_p1(37 downto 14);
                tmp_17_reg_813 <= tmp_17_fu_552_p1(13 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_fsm_state4 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce)) or ((ap_ST_fsm_state5 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce)))) then
                reg_178 <= grp_fu_164_p2(41 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state1 = ap_CS_fsm) and (ap_start = ap_const_logic_1))) then
                xn_0_scaled_V_reg_188 <= grp_fu_444_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state1 = ap_CS_fsm) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_ST_fsm_state2 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_ST_fsm_state3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_ST_fsm_state4 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_ST_fsm_state5 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_ST_fsm_state6 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_ST_fsm_state7 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state8 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state9 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
        OP1_V_1_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xn_0_scaled_V_reg_188),40));

    OP1_V_2_fu_468_p0 <= buf_xn_1_V_read;
        OP1_V_2_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(OP1_V_2_fu_468_p0),40));

        OP1_V_3_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(buf_xn_2_V_read),40));

    OP1_V_4_fu_512_p0 <= buf_yn_1_V_read;
        OP1_V_4_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(OP1_V_4_fu_512_p0),40));

        OP1_V_5_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(buf_yn_2_V_read),40));

        OP1_V_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(coeff_gain_V_read),40));

        OP2_V_1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(coeff_b0_V_read),40));

        OP2_V_2_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(coeff_b1_V_read),40));

        OP2_V_3_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(coeff_b2_V_read),40));

        OP2_V_4_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(coeff_a1_n_V_read),40));

        OP2_V_5_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(coeff_a2_n_V_read),40));

        OP2_V_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xn_0_V),40));

    Range1_all_ones_1_fu_588_p2 <= "1" when (tmp_11_fu_594_p4 = ap_const_lv4_F) else "0";
    Range1_all_ones_fu_316_p2 <= "1" when (tmp_2_fu_306_p4 = ap_const_lv4_F) else "0";
    Range1_all_zeros_1_fu_610_p2 <= "1" when (tmp_11_fu_594_p4 = ap_const_lv4_0) else "0";
    Range1_all_zeros_fu_338_p2 <= "1" when (tmp_2_fu_306_p4 = ap_const_lv4_0) else "0";
    Range2_all_ones_1_fu_604_p2 <= "1" when (tmp_7_fu_578_p4 = ap_const_lv3_7) else "0";
    Range2_all_ones_fu_332_p2 <= "1" when (tmp_1_fu_322_p4 = ap_const_lv3_7) else "0";

    ap_done_assign_proc : process(ap_start, ap_CS_fsm, ap_ce)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state9 = ap_CS_fsm)) or ((ap_ST_fsm_state1 = ap_CS_fsm) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_fsm_state1 = ap_CS_fsm) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_ST_fsm_state9 = ap_CS_fsm))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_fu_444_p3;
    ap_return_1 <= grp_fu_444_p3;
    ap_return_2 <= buf_yn_1_V_read;
    ap_return_3 <= xn_0_scaled_V_reg_188;
    ap_return_4 <= buf_xn_1_V_read;
    brmerge40_demorgan_i_1_fu_700_p2 <= (grp_fu_228_p3 and deleted_ones_1_fu_665_p3);
    brmerge40_demorgan_i_fu_372_p2 <= (grp_fu_228_p3 and deleted_ones_fu_344_p3);
    brmerge_i1_fu_706_p2 <= (p_not_i1_fu_677_p2 or grp_fu_228_p3);
    brmerge_i_fu_408_p2 <= (p_not_i_fu_352_p2 or grp_fu_228_p3);
    brmerge_i_i1_fu_729_p2 <= (underflow_1_fu_718_p2 or overflow_1_fu_660_p2);
    brmerge_i_i_fu_432_p2 <= (underflow_fu_396_p2 or overflow_fu_420_p2);
    carry_1_fu_634_p2 <= (tmp_18_fu_640_p3 and grp_fu_286_p2);
    carry_fu_358_p2 <= (tmp_13_fu_278_p3 and grp_fu_286_p2);
    deleted_ones_1_fu_665_p3 <= 
        p_41_i1_fu_694_p2 when (carry_1_fu_634_p2(0) = '1') else 
        Range1_all_ones_1_reg_829;
    deleted_ones_fu_344_p3 <= 
        p_41_i_fu_292_p2 when (carry_fu_358_p2(0) = '1') else 
        Range1_all_ones_fu_316_p2;
    deleted_zeros_1_fu_648_p3 <= 
        Range1_all_ones_1_reg_829 when (carry_1_fu_634_p2(0) = '1') else 
        Range1_all_zeros_1_reg_836;
    deleted_zeros_fu_364_p3 <= 
        Range1_all_ones_fu_316_p2 when (carry_fu_358_p2(0) = '1') else 
        Range1_all_zeros_fu_338_p2;

    grp_fu_164_p0_assign_proc : process(ap_CS_fsm, reg_178, p_Val2_10_reg_808, tmp_17_cast_fu_487_p1, tmp_20_cast_cast_fu_522_p1, tmp4_cast_fu_565_p1, grp_fu_164_p00)
    begin
        if ((ap_ST_fsm_state9 = ap_CS_fsm)) then 
            grp_fu_164_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_10_reg_808),42));
        elsif ((ap_ST_fsm_state8 = ap_CS_fsm)) then 
            grp_fu_164_p0 <= tmp4_cast_fu_565_p1;
        elsif ((ap_ST_fsm_state6 = ap_CS_fsm)) then 
            grp_fu_164_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_cast_cast_fu_522_p1),42));
        elsif (((ap_ST_fsm_state7 = ap_CS_fsm) or (ap_ST_fsm_state5 = ap_CS_fsm))) then 
            grp_fu_164_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_178),42));
        elsif ((ap_ST_fsm_state4 = ap_CS_fsm)) then 
            grp_fu_164_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_cast_fu_487_p1),42));
        elsif ((ap_ST_fsm_state1 = ap_CS_fsm)) then 
            grp_fu_164_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_164_p00),42));
        else 
            grp_fu_164_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_164_p00 <= grp_fu_194_p2(35 downto 12);

    grp_fu_164_p1_assign_proc : process(ap_CS_fsm, reg_191, tmp_s_fu_616_p1, tmp_19_cast_fu_502_p1, tmp_18_cast_fu_236_p1, tmp_21_cast_cast_fu_537_p1, p_Val2_8_cast_fu_560_p1, tmp_8_fu_273_p1)
    begin
        if ((ap_ST_fsm_state9 = ap_CS_fsm)) then 
            grp_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_273_p1),42));
        elsif ((ap_ST_fsm_state8 = ap_CS_fsm)) then 
            grp_fu_164_p1 <= p_Val2_8_cast_fu_560_p1;
        elsif ((ap_ST_fsm_state7 = ap_CS_fsm)) then 
            grp_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_191),42));
        elsif ((ap_ST_fsm_state6 = ap_CS_fsm)) then 
            grp_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_cast_cast_fu_537_p1),42));
        elsif ((ap_ST_fsm_state5 = ap_CS_fsm)) then 
            grp_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_cast_fu_236_p1),42));
        elsif ((ap_ST_fsm_state4 = ap_CS_fsm)) then 
            grp_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_cast_fu_502_p1),42));
        elsif ((ap_ST_fsm_state1 = ap_CS_fsm)) then 
            grp_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_616_p1),42));
        else 
            grp_fu_164_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_164_p2 <= std_logic_vector(unsigned(grp_fu_164_p0) + unsigned(grp_fu_164_p1));

    grp_fu_194_p0_assign_proc : process(ap_CS_fsm, OP2_V_fu_241_p1, OP1_V_1_fu_477_p1, OP1_V_2_fu_468_p1, OP1_V_3_fu_492_p1, OP1_V_4_fu_512_p1, OP1_V_5_fu_527_p1)
    begin
        if ((ap_ST_fsm_state6 = ap_CS_fsm)) then 
            grp_fu_194_p0 <= OP1_V_5_fu_527_p1(24 - 1 downto 0);
        elsif ((ap_ST_fsm_state5 = ap_CS_fsm)) then 
            grp_fu_194_p0 <= OP1_V_4_fu_512_p1(24 - 1 downto 0);
        elsif ((ap_ST_fsm_state4 = ap_CS_fsm)) then 
            grp_fu_194_p0 <= OP1_V_3_fu_492_p1(24 - 1 downto 0);
        elsif ((ap_ST_fsm_state3 = ap_CS_fsm)) then 
            grp_fu_194_p0 <= OP1_V_2_fu_468_p1(24 - 1 downto 0);
        elsif ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            grp_fu_194_p0 <= OP1_V_1_fu_477_p1(24 - 1 downto 0);
        elsif ((ap_ST_fsm_state1 = ap_CS_fsm)) then 
            grp_fu_194_p0 <= OP2_V_fu_241_p1(24 - 1 downto 0);
        else 
            grp_fu_194_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_194_p1_assign_proc : process(ap_CS_fsm, OP1_V_fu_507_p1, OP2_V_1_fu_472_p1, OP2_V_2_fu_482_p1, OP2_V_3_fu_497_p1, OP2_V_4_fu_517_p1, OP2_V_5_fu_532_p1)
    begin
        if ((ap_ST_fsm_state6 = ap_CS_fsm)) then 
            grp_fu_194_p1 <= OP2_V_5_fu_532_p1(16 - 1 downto 0);
        elsif ((ap_ST_fsm_state5 = ap_CS_fsm)) then 
            grp_fu_194_p1 <= OP2_V_4_fu_517_p1(16 - 1 downto 0);
        elsif ((ap_ST_fsm_state4 = ap_CS_fsm)) then 
            grp_fu_194_p1 <= OP2_V_3_fu_497_p1(16 - 1 downto 0);
        elsif ((ap_ST_fsm_state3 = ap_CS_fsm)) then 
            grp_fu_194_p1 <= OP2_V_2_fu_482_p1(16 - 1 downto 0);
        elsif ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            grp_fu_194_p1 <= OP2_V_1_fu_472_p1(16 - 1 downto 0);
        elsif ((ap_ST_fsm_state1 = ap_CS_fsm)) then 
            grp_fu_194_p1 <= OP1_V_fu_507_p1(16 - 1 downto 0);
        else 
            grp_fu_194_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_194_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_194_p0) * signed(grp_fu_194_p1))), 40));
    grp_fu_228_p1 <= grp_fu_164_p2(24 - 1 downto 0);
    grp_fu_228_p3 <= grp_fu_228_p1(23 downto 23);
    grp_fu_286_p2 <= (grp_fu_228_p3 xor ap_const_lv1_1);

    grp_fu_444_p0_assign_proc : process(ap_CS_fsm, underflow_not_fu_438_p2, underflow_1_not_fu_735_p2)
    begin
        if ((ap_ST_fsm_state9 = ap_CS_fsm)) then 
            grp_fu_444_p0 <= underflow_1_not_fu_735_p2;
        elsif ((ap_ST_fsm_state1 = ap_CS_fsm)) then 
            grp_fu_444_p0 <= underflow_not_fu_438_p2;
        else 
            grp_fu_444_p0 <= "X";
        end if; 
    end process;

    grp_fu_444_p3 <= 
        grp_fu_741_p3 when (grp_fu_444_p0(0) = '1') else 
        grp_fu_452_p3;

    grp_fu_452_p0_assign_proc : process(ap_CS_fsm, underflow_fu_396_p2, underflow_1_fu_718_p2)
    begin
        if ((ap_ST_fsm_state9 = ap_CS_fsm)) then 
            grp_fu_452_p0 <= underflow_1_fu_718_p2;
        elsif ((ap_ST_fsm_state1 = ap_CS_fsm)) then 
            grp_fu_452_p0 <= underflow_fu_396_p2;
        else 
            grp_fu_452_p0 <= "X";
        end if; 
    end process;

    grp_fu_452_p2 <= grp_fu_164_p2(24 - 1 downto 0);
    grp_fu_452_p3 <= 
        ap_const_lv24_800000 when (grp_fu_452_p0(0) = '1') else 
        grp_fu_452_p2;

    grp_fu_741_p0_assign_proc : process(ap_CS_fsm, brmerge_i_i1_fu_729_p2, brmerge_i_i_fu_432_p2)
    begin
        if ((ap_ST_fsm_state9 = ap_CS_fsm)) then 
            grp_fu_741_p0 <= brmerge_i_i1_fu_729_p2;
        elsif ((ap_ST_fsm_state1 = ap_CS_fsm)) then 
            grp_fu_741_p0 <= brmerge_i_i_fu_432_p2;
        else 
            grp_fu_741_p0 <= "X";
        end if; 
    end process;

    grp_fu_741_p2 <= grp_fu_164_p2(24 - 1 downto 0);
    grp_fu_741_p3 <= 
        ap_const_lv24_7FFFFF when (grp_fu_741_p0(0) = '1') else 
        grp_fu_741_p2;
    overflow_1_fu_660_p2 <= (tmp_12_fu_628_p2 and brmerge_i1_fu_706_p2);
    overflow_fu_420_p2 <= (tmp_6_fu_390_p2 and brmerge_i_fu_408_p2);
    p_38_i1_fu_672_p2 <= (carry_1_fu_634_p2 and Range1_all_ones_1_reg_829);
    p_38_i_fu_402_p2 <= (carry_fu_358_p2 and Range1_all_ones_fu_316_p2);
    p_41_i1_fu_694_p2 <= (tmp_10_fu_654_p2 and Range2_all_ones_1_reg_824);
    p_41_i_fu_292_p2 <= (tmp_4_fu_378_p2 and Range2_all_ones_fu_332_p2);
    p_Val2_10_fu_542_p1 <= grp_fu_164_p2(41 - 1 downto 0);
    p_Val2_8_cast_fu_560_p0 <= reg_178;
        p_Val2_8_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_cast_fu_560_p0),42));

    p_not_i1_fu_677_p2 <= (deleted_zeros_1_fu_648_p3 xor ap_const_lv1_1);
    p_not_i_fu_352_p2 <= (deleted_zeros_fu_364_p3 xor ap_const_lv1_1);
    signbit_fu_265_p3 <= grp_fu_194_p2(39 downto 39);
    tmp1_demorgan_fu_384_p2 <= (p_38_i_fu_402_p2 or brmerge40_demorgan_i_fu_372_p2);
    tmp1_fu_414_p2 <= (tmp1_demorgan_fu_384_p2 xor ap_const_lv1_1);
    tmp2_fu_426_p2 <= (tmp_6_fu_390_p2 or brmerge40_demorgan_i_fu_372_p2);
    tmp4_cast_fu_565_p0 <= reg_191;
        tmp4_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_cast_fu_565_p0),42));

    tmp5_demorgan_fu_683_p2 <= (p_38_i1_fu_672_p2 or brmerge40_demorgan_i_1_fu_700_p2);
    tmp5_fu_712_p2 <= (tmp5_demorgan_fu_683_p2 xor ap_const_lv1_1);
    tmp6_fu_723_p2 <= (tmp_12_fu_628_p2 or brmerge40_demorgan_i_1_fu_700_p2);
    tmp_10_fu_654_p2 <= (tmp_20_fu_620_p3 xor ap_const_lv1_1);
    tmp_11_fu_594_p4 <= grp_fu_164_p2(41 downto 38);
    tmp_12_fu_628_p2 <= (signbit_1_reg_818 xor ap_const_lv1_1);
    tmp_13_fu_278_p3 <= grp_fu_194_p2(35 downto 35);
    tmp_15_fu_298_p3 <= grp_fu_194_p2(36 downto 36);
    tmp_17_cast_fu_487_p0 <= reg_171(40 - 1 downto 0);
        tmp_17_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_cast_fu_487_p0),41));

    tmp_17_fu_552_p1 <= grp_fu_164_p2(41 - 1 downto 0);
    tmp_18_cast_fu_236_p0 <= reg_191(40 - 1 downto 0);
        tmp_18_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_cast_fu_236_p0),41));

    tmp_18_fu_640_p3 <= reg_171(37 downto 37);
        tmp_19_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_194_p2),41));

    tmp_1_fu_322_p4 <= grp_fu_194_p2(39 downto 37);
    tmp_20_cast_cast_fu_522_p0 <= reg_171(40 - 1 downto 0);
        tmp_20_cast_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_cast_cast_fu_522_p0),41));

    tmp_20_fu_620_p3 <= reg_171(38 downto 38);
        tmp_21_cast_cast_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_194_p2),41));

    tmp_2_fu_306_p4 <= grp_fu_194_p2(39 downto 36);
    tmp_4_fu_378_p2 <= (tmp_15_fu_298_p3 xor ap_const_lv1_1);
    tmp_6_fu_390_p2 <= (signbit_fu_265_p3 xor ap_const_lv1_1);
    tmp_7_fu_578_p4 <= grp_fu_164_p2(41 downto 39);
    tmp_8_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_813),24));
    tmp_fu_246_p3 <= grp_fu_194_p2(11 downto 11);
    tmp_s_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_246_p3),24));
    underflow_1_fu_718_p2 <= (tmp5_fu_712_p2 and signbit_1_reg_818);
    underflow_1_not_fu_735_p2 <= (tmp6_fu_723_p2 or p_38_i1_fu_672_p2);
    underflow_fu_396_p2 <= (tmp1_fu_414_p2 and signbit_fu_265_p3);
    underflow_not_fu_438_p2 <= (tmp2_fu_426_p2 or p_38_i_fu_402_p2);
end behav;
