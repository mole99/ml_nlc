// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module filter_c_engine (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xn_0_V,
        coeff_gain_V_read,
        coeff_b0_V_read,
        coeff_b1_V_read,
        coeff_b2_V_read,
        coeff_a1_n_V_read,
        coeff_a2_n_V_read,
        buf_yn_1_V_read,
        buf_yn_2_V_read,
        buf_xn_1_V_read,
        buf_xn_2_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 4'd0;
parameter    ap_ST_fsm_state2 = 4'd1;
parameter    ap_ST_fsm_state3 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd3;
parameter    ap_ST_fsm_state5 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd5;
parameter    ap_ST_fsm_state7 = 4'd6;
parameter    ap_ST_fsm_state8 = 4'd7;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] xn_0_V;
input  [15:0] coeff_gain_V_read;
input  [15:0] coeff_b0_V_read;
input  [15:0] coeff_b1_V_read;
input  [15:0] coeff_b2_V_read;
input  [15:0] coeff_a1_n_V_read;
input  [15:0] coeff_a2_n_V_read;
input  [23:0] buf_yn_1_V_read;
input  [23:0] buf_yn_2_V_read;
input  [23:0] buf_xn_1_V_read;
input  [23:0] buf_xn_2_V_read;
output  [23:0] ap_return_0;
output  [23:0] ap_return_1;
output  [23:0] ap_return_2;
output  [23:0] ap_return_3;
output  [23:0] ap_return_4;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [39:0] grp_fu_194_p2;
reg   [40:0] reg_171;
wire   [41:0] grp_fu_164_p2;
reg   [40:0] reg_178;
wire  signed [23:0] grp_fu_444_p3;
reg  signed [23:0] xn_0_scaled_V_reg_188;
reg   [40:0] reg_191;
reg   [23:0] p_Val2_10_reg_808;
reg   [0:0] tmp_17_reg_813;
reg   [0:0] signbit_1_reg_818;
wire   [0:0] Range2_all_ones_1_fu_604_p2;
reg   [0:0] Range2_all_ones_1_reg_824;
wire   [0:0] Range1_all_ones_1_fu_588_p2;
reg   [0:0] Range1_all_ones_1_reg_829;
wire   [0:0] Range1_all_zeros_1_fu_610_p2;
reg   [0:0] Range1_all_zeros_1_reg_836;
reg   [41:0] grp_fu_164_p0;
wire  signed [40:0] tmp_17_cast_fu_487_p1;
wire  signed [40:0] tmp_20_cast_cast_fu_522_p1;
wire  signed [41:0] tmp4_cast_fu_565_p1;
reg   [41:0] grp_fu_164_p1;
wire   [23:0] tmp_s_fu_616_p1;
wire  signed [40:0] tmp_19_cast_fu_502_p1;
wire  signed [40:0] tmp_18_cast_fu_236_p1;
wire  signed [40:0] tmp_21_cast_cast_fu_537_p1;
wire  signed [41:0] p_Val2_8_cast_fu_560_p1;
wire   [23:0] tmp_8_fu_273_p1;
reg  signed [23:0] grp_fu_194_p0;
wire  signed [39:0] OP2_V_fu_241_p1;
wire  signed [39:0] OP1_V_1_fu_477_p1;
wire  signed [39:0] OP1_V_2_fu_468_p1;
wire  signed [39:0] OP1_V_3_fu_492_p1;
wire  signed [39:0] OP1_V_4_fu_512_p1;
wire  signed [39:0] OP1_V_5_fu_527_p1;
reg  signed [15:0] grp_fu_194_p1;
wire  signed [39:0] OP1_V_fu_507_p1;
wire  signed [39:0] OP2_V_1_fu_472_p1;
wire  signed [39:0] OP2_V_2_fu_482_p1;
wire  signed [39:0] OP2_V_3_fu_497_p1;
wire  signed [39:0] OP2_V_4_fu_517_p1;
wire  signed [39:0] OP2_V_5_fu_532_p1;
wire   [23:0] grp_fu_228_p1;
wire   [39:0] tmp_18_cast_fu_236_p0;
wire   [0:0] grp_fu_228_p3;
wire   [0:0] Range2_all_ones_fu_332_p2;
wire   [0:0] tmp_4_fu_378_p2;
wire   [3:0] tmp_2_fu_306_p4;
wire   [2:0] tmp_1_fu_322_p4;
wire   [0:0] carry_fu_358_p2;
wire   [0:0] p_41_i_fu_292_p2;
wire   [0:0] Range1_all_ones_fu_316_p2;
wire   [0:0] deleted_zeros_fu_364_p3;
wire   [0:0] tmp_13_fu_278_p3;
wire   [0:0] grp_fu_286_p2;
wire   [0:0] Range1_all_zeros_fu_338_p2;
wire   [0:0] deleted_ones_fu_344_p3;
wire   [0:0] tmp_15_fu_298_p3;
wire   [0:0] p_38_i_fu_402_p2;
wire   [0:0] brmerge40_demorgan_i_fu_372_p2;
wire   [0:0] signbit_fu_265_p3;
wire   [0:0] tmp1_fu_414_p2;
wire   [0:0] p_not_i_fu_352_p2;
wire   [0:0] tmp1_demorgan_fu_384_p2;
wire   [0:0] brmerge_i_fu_408_p2;
wire   [0:0] tmp_6_fu_390_p2;
wire   [0:0] underflow_fu_396_p2;
wire   [0:0] overflow_fu_420_p2;
wire   [0:0] tmp2_fu_426_p2;
reg   [0:0] grp_fu_444_p0;
wire   [0:0] underflow_not_fu_438_p2;
wire   [0:0] underflow_1_not_fu_735_p2;
wire   [23:0] grp_fu_741_p3;
wire   [23:0] grp_fu_452_p3;
reg   [0:0] grp_fu_452_p0;
wire   [0:0] underflow_1_fu_718_p2;
wire   [23:0] grp_fu_452_p2;
wire  signed [23:0] OP1_V_2_fu_468_p0;
wire   [39:0] tmp_17_cast_fu_487_p0;
wire  signed [23:0] OP1_V_4_fu_512_p0;
wire   [39:0] tmp_20_cast_cast_fu_522_p0;
wire   [40:0] p_Val2_10_fu_542_p1;
wire   [40:0] tmp_17_fu_552_p1;
wire  signed [40:0] p_Val2_8_cast_fu_560_p0;
wire  signed [40:0] tmp4_cast_fu_565_p0;
wire   [3:0] tmp_11_fu_594_p4;
wire   [2:0] tmp_7_fu_578_p4;
wire   [0:0] tmp_fu_246_p3;
wire   [0:0] tmp_18_fu_640_p3;
wire   [0:0] carry_1_fu_634_p2;
wire   [0:0] tmp_20_fu_620_p3;
wire   [0:0] brmerge_i1_fu_706_p2;
wire   [0:0] tmp_12_fu_628_p2;
wire   [0:0] p_41_i1_fu_694_p2;
wire   [0:0] deleted_zeros_1_fu_648_p3;
wire   [0:0] p_38_i1_fu_672_p2;
wire   [0:0] brmerge40_demorgan_i_1_fu_700_p2;
wire   [0:0] tmp_10_fu_654_p2;
wire   [0:0] deleted_ones_1_fu_665_p3;
wire   [0:0] p_not_i1_fu_677_p2;
wire   [0:0] tmp5_demorgan_fu_683_p2;
wire   [0:0] tmp5_fu_712_p2;
wire   [0:0] overflow_1_fu_660_p2;
wire   [0:0] tmp6_fu_723_p2;
reg   [0:0] grp_fu_741_p0;
wire   [0:0] brmerge_i_i1_fu_729_p2;
wire   [0:0] brmerge_i_i_fu_432_p2;
wire   [23:0] grp_fu_741_p2;
reg   [3:0] ap_NS_fsm;
wire   [23:0] grp_fu_164_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd0;
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        if ((1'b1 == ap_ce)) begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state7 == ap_CS_fsm) & (1'b1 == ap_ce))) begin
        reg_171 <= grp_fu_164_p2;
    end else if ((((ap_ST_fsm_state5 == ap_CS_fsm) & (1'b1 == ap_ce)) | ((ap_ST_fsm_state2 == ap_CS_fsm) & (1'b1 == ap_ce)))) begin
        reg_171 <= grp_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((ap_ST_fsm_state6 == ap_CS_fsm)) begin
            reg_191 <= grp_fu_164_p2;
        end else if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
            reg_191 <= grp_fu_194_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (ap_ST_fsm_state8 == ap_CS_fsm))) begin
        Range1_all_ones_1_reg_829 <= Range1_all_ones_1_fu_588_p2;
        Range1_all_zeros_1_reg_836 <= Range1_all_zeros_1_fu_610_p2;
        Range2_all_ones_1_reg_824 <= Range2_all_ones_1_fu_604_p2;
        signbit_1_reg_818 <= grp_fu_164_p2[32'd41];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state7 == ap_CS_fsm) & (1'b1 == ap_ce))) begin
        p_Val2_10_reg_808 <= {{p_Val2_10_fu_542_p1[37:14]}};
        tmp_17_reg_813 <= tmp_17_fu_552_p1[32'd13];
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_ST_fsm_state4 == ap_CS_fsm) & (1'b1 == ap_ce)) | ((ap_ST_fsm_state5 == ap_CS_fsm) & (1'b1 == ap_ce)))) begin
        reg_178 <= grp_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (ap_ST_fsm_state1 == ap_CS_fsm) & (ap_start == 1'b1))) begin
        xn_0_scaled_V_reg_188 <= grp_fu_444_p3;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (ap_ST_fsm_state9 == ap_CS_fsm)) | ((ap_ST_fsm_state1 == ap_CS_fsm) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state1 == ap_CS_fsm) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (ap_ST_fsm_state9 == ap_CS_fsm))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state9 == ap_CS_fsm)) begin
        grp_fu_164_p0 = p_Val2_10_reg_808;
    end else if ((ap_ST_fsm_state8 == ap_CS_fsm)) begin
        grp_fu_164_p0 = tmp4_cast_fu_565_p1;
    end else if ((ap_ST_fsm_state6 == ap_CS_fsm)) begin
        grp_fu_164_p0 = tmp_20_cast_cast_fu_522_p1;
    end else if (((ap_ST_fsm_state7 == ap_CS_fsm) | (ap_ST_fsm_state5 == ap_CS_fsm))) begin
        grp_fu_164_p0 = reg_178;
    end else if ((ap_ST_fsm_state4 == ap_CS_fsm)) begin
        grp_fu_164_p0 = tmp_17_cast_fu_487_p1;
    end else if ((ap_ST_fsm_state1 == ap_CS_fsm)) begin
        grp_fu_164_p0 = grp_fu_164_p00;
    end else begin
        grp_fu_164_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state9 == ap_CS_fsm)) begin
        grp_fu_164_p1 = tmp_8_fu_273_p1;
    end else if ((ap_ST_fsm_state8 == ap_CS_fsm)) begin
        grp_fu_164_p1 = p_Val2_8_cast_fu_560_p1;
    end else if ((ap_ST_fsm_state7 == ap_CS_fsm)) begin
        grp_fu_164_p1 = reg_191;
    end else if ((ap_ST_fsm_state6 == ap_CS_fsm)) begin
        grp_fu_164_p1 = tmp_21_cast_cast_fu_537_p1;
    end else if ((ap_ST_fsm_state5 == ap_CS_fsm)) begin
        grp_fu_164_p1 = tmp_18_cast_fu_236_p1;
    end else if ((ap_ST_fsm_state4 == ap_CS_fsm)) begin
        grp_fu_164_p1 = tmp_19_cast_fu_502_p1;
    end else if ((ap_ST_fsm_state1 == ap_CS_fsm)) begin
        grp_fu_164_p1 = tmp_s_fu_616_p1;
    end else begin
        grp_fu_164_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state6 == ap_CS_fsm)) begin
        grp_fu_194_p0 = OP1_V_5_fu_527_p1;
    end else if ((ap_ST_fsm_state5 == ap_CS_fsm)) begin
        grp_fu_194_p0 = OP1_V_4_fu_512_p1;
    end else if ((ap_ST_fsm_state4 == ap_CS_fsm)) begin
        grp_fu_194_p0 = OP1_V_3_fu_492_p1;
    end else if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
        grp_fu_194_p0 = OP1_V_2_fu_468_p1;
    end else if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
        grp_fu_194_p0 = OP1_V_1_fu_477_p1;
    end else if ((ap_ST_fsm_state1 == ap_CS_fsm)) begin
        grp_fu_194_p0 = OP2_V_fu_241_p1;
    end else begin
        grp_fu_194_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state6 == ap_CS_fsm)) begin
        grp_fu_194_p1 = OP2_V_5_fu_532_p1;
    end else if ((ap_ST_fsm_state5 == ap_CS_fsm)) begin
        grp_fu_194_p1 = OP2_V_4_fu_517_p1;
    end else if ((ap_ST_fsm_state4 == ap_CS_fsm)) begin
        grp_fu_194_p1 = OP2_V_3_fu_497_p1;
    end else if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
        grp_fu_194_p1 = OP2_V_2_fu_482_p1;
    end else if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
        grp_fu_194_p1 = OP2_V_1_fu_472_p1;
    end else if ((ap_ST_fsm_state1 == ap_CS_fsm)) begin
        grp_fu_194_p1 = OP1_V_fu_507_p1;
    end else begin
        grp_fu_194_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state9 == ap_CS_fsm)) begin
        grp_fu_444_p0 = underflow_1_not_fu_735_p2;
    end else if ((ap_ST_fsm_state1 == ap_CS_fsm)) begin
        grp_fu_444_p0 = underflow_not_fu_438_p2;
    end else begin
        grp_fu_444_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state9 == ap_CS_fsm)) begin
        grp_fu_452_p0 = underflow_1_fu_718_p2;
    end else if ((ap_ST_fsm_state1 == ap_CS_fsm)) begin
        grp_fu_452_p0 = underflow_fu_396_p2;
    end else begin
        grp_fu_452_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state9 == ap_CS_fsm)) begin
        grp_fu_741_p0 = brmerge_i_i1_fu_729_p2;
    end else if ((ap_ST_fsm_state1 == ap_CS_fsm)) begin
        grp_fu_741_p0 = brmerge_i_i_fu_432_p2;
    end else begin
        grp_fu_741_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_ce) & (ap_ST_fsm_state1 == ap_CS_fsm) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_ST_fsm_state2 == ap_CS_fsm) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_ST_fsm_state3 == ap_CS_fsm) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_ST_fsm_state4 == ap_CS_fsm) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_ST_fsm_state5 == ap_CS_fsm) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_ST_fsm_state6 == ap_CS_fsm) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((ap_ST_fsm_state7 == ap_CS_fsm) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_ce) & (ap_ST_fsm_state8 == ap_CS_fsm))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_ce) & (ap_ST_fsm_state9 == ap_CS_fsm))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_fu_477_p1 = xn_0_scaled_V_reg_188;

assign OP1_V_2_fu_468_p0 = buf_xn_1_V_read;

assign OP1_V_2_fu_468_p1 = OP1_V_2_fu_468_p0;

assign OP1_V_3_fu_492_p1 = $signed(buf_xn_2_V_read);

assign OP1_V_4_fu_512_p0 = buf_yn_1_V_read;

assign OP1_V_4_fu_512_p1 = OP1_V_4_fu_512_p0;

assign OP1_V_5_fu_527_p1 = $signed(buf_yn_2_V_read);

assign OP1_V_fu_507_p1 = $signed(coeff_gain_V_read);

assign OP2_V_1_fu_472_p1 = $signed(coeff_b0_V_read);

assign OP2_V_2_fu_482_p1 = $signed(coeff_b1_V_read);

assign OP2_V_3_fu_497_p1 = $signed(coeff_b2_V_read);

assign OP2_V_4_fu_517_p1 = $signed(coeff_a1_n_V_read);

assign OP2_V_5_fu_532_p1 = $signed(coeff_a2_n_V_read);

assign OP2_V_fu_241_p1 = $signed(xn_0_V);

assign Range1_all_ones_1_fu_588_p2 = ((tmp_11_fu_594_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_ones_fu_316_p2 = ((tmp_2_fu_306_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_zeros_1_fu_610_p2 = ((tmp_11_fu_594_p4 == 4'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_338_p2 = ((tmp_2_fu_306_p4 == 4'd0) ? 1'b1 : 1'b0);

assign Range2_all_ones_1_fu_604_p2 = ((tmp_7_fu_578_p4 == 3'd7) ? 1'b1 : 1'b0);

assign Range2_all_ones_fu_332_p2 = ((tmp_1_fu_322_p4 == 3'd7) ? 1'b1 : 1'b0);

assign ap_return_0 = grp_fu_444_p3;

assign ap_return_1 = grp_fu_444_p3;

assign ap_return_2 = buf_yn_1_V_read;

assign ap_return_3 = xn_0_scaled_V_reg_188;

assign ap_return_4 = buf_xn_1_V_read;

assign brmerge40_demorgan_i_1_fu_700_p2 = (grp_fu_228_p3 & deleted_ones_1_fu_665_p3);

assign brmerge40_demorgan_i_fu_372_p2 = (grp_fu_228_p3 & deleted_ones_fu_344_p3);

assign brmerge_i1_fu_706_p2 = (p_not_i1_fu_677_p2 | grp_fu_228_p3);

assign brmerge_i_fu_408_p2 = (p_not_i_fu_352_p2 | grp_fu_228_p3);

assign brmerge_i_i1_fu_729_p2 = (underflow_1_fu_718_p2 | overflow_1_fu_660_p2);

assign brmerge_i_i_fu_432_p2 = (underflow_fu_396_p2 | overflow_fu_420_p2);

assign carry_1_fu_634_p2 = (tmp_18_fu_640_p3 & grp_fu_286_p2);

assign carry_fu_358_p2 = (tmp_13_fu_278_p3 & grp_fu_286_p2);

assign deleted_ones_1_fu_665_p3 = ((carry_1_fu_634_p2[0:0] === 1'b1) ? p_41_i1_fu_694_p2 : Range1_all_ones_1_reg_829);

assign deleted_ones_fu_344_p3 = ((carry_fu_358_p2[0:0] === 1'b1) ? p_41_i_fu_292_p2 : Range1_all_ones_fu_316_p2);

assign deleted_zeros_1_fu_648_p3 = ((carry_1_fu_634_p2[0:0] === 1'b1) ? Range1_all_ones_1_reg_829 : Range1_all_zeros_1_reg_836);

assign deleted_zeros_fu_364_p3 = ((carry_fu_358_p2[0:0] === 1'b1) ? Range1_all_ones_fu_316_p2 : Range1_all_zeros_fu_338_p2);

assign grp_fu_164_p00 = {{grp_fu_194_p2[35:12]}};

assign grp_fu_164_p2 = (grp_fu_164_p0 + grp_fu_164_p1);

assign grp_fu_194_p2 = ($signed(grp_fu_194_p0) * $signed(grp_fu_194_p1));

assign grp_fu_228_p1 = grp_fu_164_p2;

assign grp_fu_228_p3 = grp_fu_228_p1[32'd23];

assign grp_fu_286_p2 = (grp_fu_228_p3 ^ 1'd1);

assign grp_fu_444_p3 = ((grp_fu_444_p0[0:0] === 1'b1) ? grp_fu_741_p3 : grp_fu_452_p3);

assign grp_fu_452_p2 = grp_fu_164_p2;

assign grp_fu_452_p3 = ((grp_fu_452_p0[0:0] === 1'b1) ? 24'd8388608 : grp_fu_452_p2);

assign grp_fu_741_p2 = grp_fu_164_p2;

assign grp_fu_741_p3 = ((grp_fu_741_p0[0:0] === 1'b1) ? 24'd8388607 : grp_fu_741_p2);

assign overflow_1_fu_660_p2 = (tmp_12_fu_628_p2 & brmerge_i1_fu_706_p2);

assign overflow_fu_420_p2 = (tmp_6_fu_390_p2 & brmerge_i_fu_408_p2);

assign p_38_i1_fu_672_p2 = (carry_1_fu_634_p2 & Range1_all_ones_1_reg_829);

assign p_38_i_fu_402_p2 = (carry_fu_358_p2 & Range1_all_ones_fu_316_p2);

assign p_41_i1_fu_694_p2 = (tmp_10_fu_654_p2 & Range2_all_ones_1_reg_824);

assign p_41_i_fu_292_p2 = (tmp_4_fu_378_p2 & Range2_all_ones_fu_332_p2);

assign p_Val2_10_fu_542_p1 = grp_fu_164_p2;

assign p_Val2_8_cast_fu_560_p0 = reg_178;

assign p_Val2_8_cast_fu_560_p1 = p_Val2_8_cast_fu_560_p0;

assign p_not_i1_fu_677_p2 = (deleted_zeros_1_fu_648_p3 ^ 1'd1);

assign p_not_i_fu_352_p2 = (deleted_zeros_fu_364_p3 ^ 1'd1);

assign signbit_fu_265_p3 = grp_fu_194_p2[32'd39];

assign tmp1_demorgan_fu_384_p2 = (p_38_i_fu_402_p2 | brmerge40_demorgan_i_fu_372_p2);

assign tmp1_fu_414_p2 = (tmp1_demorgan_fu_384_p2 ^ 1'd1);

assign tmp2_fu_426_p2 = (tmp_6_fu_390_p2 | brmerge40_demorgan_i_fu_372_p2);

assign tmp4_cast_fu_565_p0 = reg_191;

assign tmp4_cast_fu_565_p1 = tmp4_cast_fu_565_p0;

assign tmp5_demorgan_fu_683_p2 = (p_38_i1_fu_672_p2 | brmerge40_demorgan_i_1_fu_700_p2);

assign tmp5_fu_712_p2 = (tmp5_demorgan_fu_683_p2 ^ 1'd1);

assign tmp6_fu_723_p2 = (tmp_12_fu_628_p2 | brmerge40_demorgan_i_1_fu_700_p2);

assign tmp_10_fu_654_p2 = (tmp_20_fu_620_p3 ^ 1'd1);

assign tmp_11_fu_594_p4 = {{grp_fu_164_p2[41:38]}};

assign tmp_12_fu_628_p2 = (signbit_1_reg_818 ^ 1'd1);

assign tmp_13_fu_278_p3 = grp_fu_194_p2[32'd35];

assign tmp_15_fu_298_p3 = grp_fu_194_p2[32'd36];

assign tmp_17_cast_fu_487_p0 = reg_171;

assign tmp_17_cast_fu_487_p1 = $signed(tmp_17_cast_fu_487_p0);

assign tmp_17_fu_552_p1 = grp_fu_164_p2;

assign tmp_18_cast_fu_236_p0 = reg_191;

assign tmp_18_cast_fu_236_p1 = $signed(tmp_18_cast_fu_236_p0);

assign tmp_18_fu_640_p3 = reg_171[32'd37];

assign tmp_19_cast_fu_502_p1 = $signed(grp_fu_194_p2);

assign tmp_1_fu_322_p4 = {{grp_fu_194_p2[39:37]}};

assign tmp_20_cast_cast_fu_522_p0 = reg_171;

assign tmp_20_cast_cast_fu_522_p1 = $signed(tmp_20_cast_cast_fu_522_p0);

assign tmp_20_fu_620_p3 = reg_171[32'd38];

assign tmp_21_cast_cast_fu_537_p1 = $signed(grp_fu_194_p2);

assign tmp_2_fu_306_p4 = {{grp_fu_194_p2[39:36]}};

assign tmp_4_fu_378_p2 = (tmp_15_fu_298_p3 ^ 1'd1);

assign tmp_6_fu_390_p2 = (signbit_fu_265_p3 ^ 1'd1);

assign tmp_7_fu_578_p4 = {{grp_fu_164_p2[41:39]}};

assign tmp_8_fu_273_p1 = tmp_17_reg_813;

assign tmp_fu_246_p3 = grp_fu_194_p2[32'd11];

assign tmp_s_fu_616_p1 = tmp_fu_246_p3;

assign underflow_1_fu_718_p2 = (tmp5_fu_712_p2 & signbit_1_reg_818);

assign underflow_1_not_fu_735_p2 = (tmp6_fu_723_p2 | p_38_i1_fu_672_p2);

assign underflow_fu_396_p2 = (tmp1_fu_414_p2 & signbit_fu_265_p3);

assign underflow_not_fu_438_p2 = (tmp2_fu_426_p2 | p_38_i_fu_402_p2);

endmodule //filter_c_engine
