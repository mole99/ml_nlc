-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getBias is
port (
    ap_ready : OUT STD_LOGIC;
    network_weights_bias : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_86 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_87 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_88 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_89 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_90 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_91 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_92 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_93 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_94 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_95 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_96 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_97 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_98 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_99 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_100 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_101 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_102 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_103 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_104 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_105 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_106 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_107 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_108 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_109 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_110 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_111 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_112 : IN STD_LOGIC_VECTOR (31 downto 0);
    network_weights_bias_113 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer : IN STD_LOGIC_VECTOR (3 downto 0);
    index : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of getBias is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal tmp_fu_274_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_316_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_342_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln30_fu_356_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln30_3_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_274_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_316_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln30_2_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_1_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_342_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln30_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_384_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln30_1_fu_398_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln30_1_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_2_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_2_fu_412_p3 : STD_LOGIC_VECTOR (31 downto 0);

    component network_top_mux_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component network_top_mux_8cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component network_top_mux_4dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    network_top_mux_1bkb_U1 : component network_top_mux_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => network_weights_bias,
        din1 => network_weights_bias_86,
        din2 => network_weights_bias_87,
        din3 => network_weights_bias_88,
        din4 => network_weights_bias_89,
        din5 => network_weights_bias_90,
        din6 => network_weights_bias_91,
        din7 => network_weights_bias_92,
        din8 => network_weights_bias_93,
        din9 => network_weights_bias_94,
        din10 => network_weights_bias_95,
        din11 => network_weights_bias_96,
        din12 => network_weights_bias_97,
        din13 => network_weights_bias_98,
        din14 => network_weights_bias_99,
        din15 => network_weights_bias_100,
        din16 => tmp_fu_274_p17,
        dout => tmp_fu_274_p18);

    network_top_mux_8cud_U2 : component network_top_mux_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => network_weights_bias_101,
        din1 => network_weights_bias_102,
        din2 => network_weights_bias_103,
        din3 => network_weights_bias_104,
        din4 => network_weights_bias_105,
        din5 => network_weights_bias_106,
        din6 => network_weights_bias_107,
        din7 => network_weights_bias_108,
        din8 => tmp_4_fu_316_p9,
        dout => tmp_4_fu_316_p10);

    network_top_mux_4dEe_U3 : component network_top_mux_4dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => network_weights_bias_109,
        din1 => network_weights_bias_110,
        din2 => network_weights_bias_111,
        din3 => network_weights_bias_112,
        din4 => tmp_5_fu_342_p5,
        dout => tmp_5_fu_342_p6);




    ap_ready <= ap_const_logic_1;
    ap_return <= 
        select_ln30_2_fu_412_p3 when (or_ln30_2_fu_420_p2(0) = '1') else 
        ap_const_lv32_0;
    icmp_ln30_1_fu_366_p2 <= "1" when (trunc_ln30_fu_356_p1 = ap_const_lv2_2) else "0";
    icmp_ln30_2_fu_372_p2 <= "1" when (trunc_ln30_fu_356_p1 = ap_const_lv2_1) else "0";
    icmp_ln30_3_fu_378_p2 <= "1" when (trunc_ln30_fu_356_p1 = ap_const_lv2_0) else "0";
    icmp_ln30_fu_360_p2 <= "1" when (trunc_ln30_fu_356_p1 = ap_const_lv2_3) else "0";
    or_ln30_1_fu_406_p2 <= (icmp_ln30_fu_360_p2 or icmp_ln30_1_fu_366_p2);
    or_ln30_2_fu_420_p2 <= (or_ln30_fu_392_p2 or or_ln30_1_fu_406_p2);
    or_ln30_fu_392_p2 <= (icmp_ln30_3_fu_378_p2 or icmp_ln30_2_fu_372_p2);
    select_ln30_1_fu_398_p3 <= 
        tmp_5_fu_342_p6 when (icmp_ln30_1_fu_366_p2(0) = '1') else 
        network_weights_bias_113;
    select_ln30_2_fu_412_p3 <= 
        select_ln30_fu_384_p3 when (or_ln30_fu_392_p2(0) = '1') else 
        select_ln30_1_fu_398_p3;
    select_ln30_fu_384_p3 <= 
        tmp_fu_274_p18 when (icmp_ln30_3_fu_378_p2(0) = '1') else 
        tmp_4_fu_316_p10;
    tmp_4_fu_316_p9 <= index(3 - 1 downto 0);
    tmp_5_fu_342_p5 <= index(2 - 1 downto 0);
    tmp_fu_274_p17 <= index(4 - 1 downto 0);
    trunc_ln30_fu_356_p1 <= layer(2 - 1 downto 0);
end behav;
