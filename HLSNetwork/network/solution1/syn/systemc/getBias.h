// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getBias_HH_
#define _getBias_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "network_top_mux_1bkb.h"
#include "network_top_mux_8cud.h"
#include "network_top_mux_4dEe.h"

namespace ap_rtl {

struct getBias : public sc_module {
    // Port declarations 33
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > network_weights_bias;
    sc_in< sc_lv<32> > network_weights_bias_86;
    sc_in< sc_lv<32> > network_weights_bias_87;
    sc_in< sc_lv<32> > network_weights_bias_88;
    sc_in< sc_lv<32> > network_weights_bias_89;
    sc_in< sc_lv<32> > network_weights_bias_90;
    sc_in< sc_lv<32> > network_weights_bias_91;
    sc_in< sc_lv<32> > network_weights_bias_92;
    sc_in< sc_lv<32> > network_weights_bias_93;
    sc_in< sc_lv<32> > network_weights_bias_94;
    sc_in< sc_lv<32> > network_weights_bias_95;
    sc_in< sc_lv<32> > network_weights_bias_96;
    sc_in< sc_lv<32> > network_weights_bias_97;
    sc_in< sc_lv<32> > network_weights_bias_98;
    sc_in< sc_lv<32> > network_weights_bias_99;
    sc_in< sc_lv<32> > network_weights_bias_100;
    sc_in< sc_lv<32> > network_weights_bias_101;
    sc_in< sc_lv<32> > network_weights_bias_102;
    sc_in< sc_lv<32> > network_weights_bias_103;
    sc_in< sc_lv<32> > network_weights_bias_104;
    sc_in< sc_lv<32> > network_weights_bias_105;
    sc_in< sc_lv<32> > network_weights_bias_106;
    sc_in< sc_lv<32> > network_weights_bias_107;
    sc_in< sc_lv<32> > network_weights_bias_108;
    sc_in< sc_lv<32> > network_weights_bias_109;
    sc_in< sc_lv<32> > network_weights_bias_110;
    sc_in< sc_lv<32> > network_weights_bias_111;
    sc_in< sc_lv<32> > network_weights_bias_112;
    sc_in< sc_lv<32> > network_weights_bias_113;
    sc_in< sc_lv<4> > layer;
    sc_in< sc_lv<5> > index;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    getBias(sc_module_name name);
    SC_HAS_PROCESS(getBias);

    ~getBias();

    sc_trace_file* mVcdFile;

    network_top_mux_1bkb<1,1,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,4,32>* network_top_mux_1bkb_U1;
    network_top_mux_8cud<1,1,32,32,32,32,32,32,32,32,3,32>* network_top_mux_8cud_U2;
    network_top_mux_4dEe<1,1,32,32,32,32,2,32>* network_top_mux_4dEe_U3;
    sc_signal< sc_lv<4> > tmp_fu_274_p17;
    sc_signal< sc_lv<3> > tmp_4_fu_316_p9;
    sc_signal< sc_lv<2> > tmp_5_fu_342_p5;
    sc_signal< sc_lv<2> > trunc_ln30_fu_356_p1;
    sc_signal< sc_lv<1> > icmp_ln30_3_fu_378_p2;
    sc_signal< sc_lv<32> > tmp_fu_274_p18;
    sc_signal< sc_lv<32> > tmp_4_fu_316_p10;
    sc_signal< sc_lv<1> > icmp_ln30_2_fu_372_p2;
    sc_signal< sc_lv<1> > icmp_ln30_1_fu_366_p2;
    sc_signal< sc_lv<32> > tmp_5_fu_342_p6;
    sc_signal< sc_lv<1> > icmp_ln30_fu_360_p2;
    sc_signal< sc_lv<1> > or_ln30_fu_392_p2;
    sc_signal< sc_lv<32> > select_ln30_fu_384_p3;
    sc_signal< sc_lv<32> > select_ln30_1_fu_398_p3;
    sc_signal< sc_lv<1> > or_ln30_1_fu_406_p2;
    sc_signal< sc_lv<1> > or_ln30_2_fu_420_p2;
    sc_signal< sc_lv<32> > select_ln30_2_fu_412_p3;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln30_1_fu_366_p2();
    void thread_icmp_ln30_2_fu_372_p2();
    void thread_icmp_ln30_3_fu_378_p2();
    void thread_icmp_ln30_fu_360_p2();
    void thread_or_ln30_1_fu_406_p2();
    void thread_or_ln30_2_fu_420_p2();
    void thread_or_ln30_fu_392_p2();
    void thread_select_ln30_1_fu_398_p3();
    void thread_select_ln30_2_fu_412_p3();
    void thread_select_ln30_fu_384_p3();
    void thread_tmp_4_fu_316_p9();
    void thread_tmp_5_fu_342_p5();
    void thread_tmp_fu_274_p17();
    void thread_trunc_ln30_fu_356_p1();
};

}

using namespace ap_rtl;

#endif
