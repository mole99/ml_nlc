// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getBias.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getBias::ap_const_logic_1 = sc_dt::Log_1;
const bool getBias::ap_const_boolean_1 = true;
const sc_lv<2> getBias::ap_const_lv2_3 = "11";
const sc_lv<2> getBias::ap_const_lv2_2 = "10";
const sc_lv<2> getBias::ap_const_lv2_1 = "1";
const sc_lv<2> getBias::ap_const_lv2_0 = "00";
const sc_lv<32> getBias::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic getBias::ap_const_logic_0 = sc_dt::Log_0;

getBias::getBias(sc_module_name name) : sc_module(name), mVcdFile(0) {
    network_top_mux_1bkb_U1 = new network_top_mux_1bkb<1,1,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,4,32>("network_top_mux_1bkb_U1");
    network_top_mux_1bkb_U1->din0(network_weights_bias);
    network_top_mux_1bkb_U1->din1(network_weights_bias_86);
    network_top_mux_1bkb_U1->din2(network_weights_bias_87);
    network_top_mux_1bkb_U1->din3(network_weights_bias_88);
    network_top_mux_1bkb_U1->din4(network_weights_bias_89);
    network_top_mux_1bkb_U1->din5(network_weights_bias_90);
    network_top_mux_1bkb_U1->din6(network_weights_bias_91);
    network_top_mux_1bkb_U1->din7(network_weights_bias_92);
    network_top_mux_1bkb_U1->din8(network_weights_bias_93);
    network_top_mux_1bkb_U1->din9(network_weights_bias_94);
    network_top_mux_1bkb_U1->din10(network_weights_bias_95);
    network_top_mux_1bkb_U1->din11(network_weights_bias_96);
    network_top_mux_1bkb_U1->din12(network_weights_bias_97);
    network_top_mux_1bkb_U1->din13(network_weights_bias_98);
    network_top_mux_1bkb_U1->din14(network_weights_bias_99);
    network_top_mux_1bkb_U1->din15(network_weights_bias_100);
    network_top_mux_1bkb_U1->din16(tmp_fu_274_p17);
    network_top_mux_1bkb_U1->dout(tmp_fu_274_p18);
    network_top_mux_8cud_U2 = new network_top_mux_8cud<1,1,32,32,32,32,32,32,32,32,3,32>("network_top_mux_8cud_U2");
    network_top_mux_8cud_U2->din0(network_weights_bias_101);
    network_top_mux_8cud_U2->din1(network_weights_bias_102);
    network_top_mux_8cud_U2->din2(network_weights_bias_103);
    network_top_mux_8cud_U2->din3(network_weights_bias_104);
    network_top_mux_8cud_U2->din4(network_weights_bias_105);
    network_top_mux_8cud_U2->din5(network_weights_bias_106);
    network_top_mux_8cud_U2->din6(network_weights_bias_107);
    network_top_mux_8cud_U2->din7(network_weights_bias_108);
    network_top_mux_8cud_U2->din8(tmp_4_fu_316_p9);
    network_top_mux_8cud_U2->dout(tmp_4_fu_316_p10);
    network_top_mux_4dEe_U3 = new network_top_mux_4dEe<1,1,32,32,32,32,2,32>("network_top_mux_4dEe_U3");
    network_top_mux_4dEe_U3->din0(network_weights_bias_109);
    network_top_mux_4dEe_U3->din1(network_weights_bias_110);
    network_top_mux_4dEe_U3->din2(network_weights_bias_111);
    network_top_mux_4dEe_U3->din3(network_weights_bias_112);
    network_top_mux_4dEe_U3->din4(tmp_5_fu_342_p5);
    network_top_mux_4dEe_U3->dout(tmp_5_fu_342_p6);

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( or_ln30_2_fu_420_p2 );
    sensitive << ( select_ln30_2_fu_412_p3 );

    SC_METHOD(thread_icmp_ln30_1_fu_366_p2);
    sensitive << ( trunc_ln30_fu_356_p1 );

    SC_METHOD(thread_icmp_ln30_2_fu_372_p2);
    sensitive << ( trunc_ln30_fu_356_p1 );

    SC_METHOD(thread_icmp_ln30_3_fu_378_p2);
    sensitive << ( trunc_ln30_fu_356_p1 );

    SC_METHOD(thread_icmp_ln30_fu_360_p2);
    sensitive << ( trunc_ln30_fu_356_p1 );

    SC_METHOD(thread_or_ln30_1_fu_406_p2);
    sensitive << ( icmp_ln30_1_fu_366_p2 );
    sensitive << ( icmp_ln30_fu_360_p2 );

    SC_METHOD(thread_or_ln30_2_fu_420_p2);
    sensitive << ( or_ln30_fu_392_p2 );
    sensitive << ( or_ln30_1_fu_406_p2 );

    SC_METHOD(thread_or_ln30_fu_392_p2);
    sensitive << ( icmp_ln30_3_fu_378_p2 );
    sensitive << ( icmp_ln30_2_fu_372_p2 );

    SC_METHOD(thread_select_ln30_1_fu_398_p3);
    sensitive << ( network_weights_bias_113 );
    sensitive << ( icmp_ln30_1_fu_366_p2 );
    sensitive << ( tmp_5_fu_342_p6 );

    SC_METHOD(thread_select_ln30_2_fu_412_p3);
    sensitive << ( or_ln30_fu_392_p2 );
    sensitive << ( select_ln30_fu_384_p3 );
    sensitive << ( select_ln30_1_fu_398_p3 );

    SC_METHOD(thread_select_ln30_fu_384_p3);
    sensitive << ( icmp_ln30_3_fu_378_p2 );
    sensitive << ( tmp_fu_274_p18 );
    sensitive << ( tmp_4_fu_316_p10 );

    SC_METHOD(thread_tmp_4_fu_316_p9);
    sensitive << ( index );

    SC_METHOD(thread_tmp_5_fu_342_p5);
    sensitive << ( index );

    SC_METHOD(thread_tmp_fu_274_p17);
    sensitive << ( index );

    SC_METHOD(thread_trunc_ln30_fu_356_p1);
    sensitive << ( layer );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getBias_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, network_weights_bias, "(port)network_weights_bias");
    sc_trace(mVcdFile, network_weights_bias_86, "(port)network_weights_bias_86");
    sc_trace(mVcdFile, network_weights_bias_87, "(port)network_weights_bias_87");
    sc_trace(mVcdFile, network_weights_bias_88, "(port)network_weights_bias_88");
    sc_trace(mVcdFile, network_weights_bias_89, "(port)network_weights_bias_89");
    sc_trace(mVcdFile, network_weights_bias_90, "(port)network_weights_bias_90");
    sc_trace(mVcdFile, network_weights_bias_91, "(port)network_weights_bias_91");
    sc_trace(mVcdFile, network_weights_bias_92, "(port)network_weights_bias_92");
    sc_trace(mVcdFile, network_weights_bias_93, "(port)network_weights_bias_93");
    sc_trace(mVcdFile, network_weights_bias_94, "(port)network_weights_bias_94");
    sc_trace(mVcdFile, network_weights_bias_95, "(port)network_weights_bias_95");
    sc_trace(mVcdFile, network_weights_bias_96, "(port)network_weights_bias_96");
    sc_trace(mVcdFile, network_weights_bias_97, "(port)network_weights_bias_97");
    sc_trace(mVcdFile, network_weights_bias_98, "(port)network_weights_bias_98");
    sc_trace(mVcdFile, network_weights_bias_99, "(port)network_weights_bias_99");
    sc_trace(mVcdFile, network_weights_bias_100, "(port)network_weights_bias_100");
    sc_trace(mVcdFile, network_weights_bias_101, "(port)network_weights_bias_101");
    sc_trace(mVcdFile, network_weights_bias_102, "(port)network_weights_bias_102");
    sc_trace(mVcdFile, network_weights_bias_103, "(port)network_weights_bias_103");
    sc_trace(mVcdFile, network_weights_bias_104, "(port)network_weights_bias_104");
    sc_trace(mVcdFile, network_weights_bias_105, "(port)network_weights_bias_105");
    sc_trace(mVcdFile, network_weights_bias_106, "(port)network_weights_bias_106");
    sc_trace(mVcdFile, network_weights_bias_107, "(port)network_weights_bias_107");
    sc_trace(mVcdFile, network_weights_bias_108, "(port)network_weights_bias_108");
    sc_trace(mVcdFile, network_weights_bias_109, "(port)network_weights_bias_109");
    sc_trace(mVcdFile, network_weights_bias_110, "(port)network_weights_bias_110");
    sc_trace(mVcdFile, network_weights_bias_111, "(port)network_weights_bias_111");
    sc_trace(mVcdFile, network_weights_bias_112, "(port)network_weights_bias_112");
    sc_trace(mVcdFile, network_weights_bias_113, "(port)network_weights_bias_113");
    sc_trace(mVcdFile, layer, "(port)layer");
    sc_trace(mVcdFile, index, "(port)index");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_274_p17, "tmp_fu_274_p17");
    sc_trace(mVcdFile, tmp_4_fu_316_p9, "tmp_4_fu_316_p9");
    sc_trace(mVcdFile, tmp_5_fu_342_p5, "tmp_5_fu_342_p5");
    sc_trace(mVcdFile, trunc_ln30_fu_356_p1, "trunc_ln30_fu_356_p1");
    sc_trace(mVcdFile, icmp_ln30_3_fu_378_p2, "icmp_ln30_3_fu_378_p2");
    sc_trace(mVcdFile, tmp_fu_274_p18, "tmp_fu_274_p18");
    sc_trace(mVcdFile, tmp_4_fu_316_p10, "tmp_4_fu_316_p10");
    sc_trace(mVcdFile, icmp_ln30_2_fu_372_p2, "icmp_ln30_2_fu_372_p2");
    sc_trace(mVcdFile, icmp_ln30_1_fu_366_p2, "icmp_ln30_1_fu_366_p2");
    sc_trace(mVcdFile, tmp_5_fu_342_p6, "tmp_5_fu_342_p6");
    sc_trace(mVcdFile, icmp_ln30_fu_360_p2, "icmp_ln30_fu_360_p2");
    sc_trace(mVcdFile, or_ln30_fu_392_p2, "or_ln30_fu_392_p2");
    sc_trace(mVcdFile, select_ln30_fu_384_p3, "select_ln30_fu_384_p3");
    sc_trace(mVcdFile, select_ln30_1_fu_398_p3, "select_ln30_1_fu_398_p3");
    sc_trace(mVcdFile, or_ln30_1_fu_406_p2, "or_ln30_1_fu_406_p2");
    sc_trace(mVcdFile, or_ln30_2_fu_420_p2, "or_ln30_2_fu_420_p2");
    sc_trace(mVcdFile, select_ln30_2_fu_412_p3, "select_ln30_2_fu_412_p3");
#endif

    }
}

getBias::~getBias() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete network_top_mux_1bkb_U1;
    delete network_top_mux_8cud_U2;
    delete network_top_mux_4dEe_U3;
}

void getBias::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void getBias::thread_ap_return() {
    ap_return = (!or_ln30_2_fu_420_p2.read()[0].is_01())? sc_lv<32>(): ((or_ln30_2_fu_420_p2.read()[0].to_bool())? select_ln30_2_fu_412_p3.read(): ap_const_lv32_0);
}

void getBias::thread_icmp_ln30_1_fu_366_p2() {
    icmp_ln30_1_fu_366_p2 = (!trunc_ln30_fu_356_p1.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln30_fu_356_p1.read() == ap_const_lv2_2);
}

void getBias::thread_icmp_ln30_2_fu_372_p2() {
    icmp_ln30_2_fu_372_p2 = (!trunc_ln30_fu_356_p1.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln30_fu_356_p1.read() == ap_const_lv2_1);
}

void getBias::thread_icmp_ln30_3_fu_378_p2() {
    icmp_ln30_3_fu_378_p2 = (!trunc_ln30_fu_356_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln30_fu_356_p1.read() == ap_const_lv2_0);
}

void getBias::thread_icmp_ln30_fu_360_p2() {
    icmp_ln30_fu_360_p2 = (!trunc_ln30_fu_356_p1.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln30_fu_356_p1.read() == ap_const_lv2_3);
}

void getBias::thread_or_ln30_1_fu_406_p2() {
    or_ln30_1_fu_406_p2 = (icmp_ln30_1_fu_366_p2.read() | icmp_ln30_fu_360_p2.read());
}

void getBias::thread_or_ln30_2_fu_420_p2() {
    or_ln30_2_fu_420_p2 = (or_ln30_fu_392_p2.read() | or_ln30_1_fu_406_p2.read());
}

void getBias::thread_or_ln30_fu_392_p2() {
    or_ln30_fu_392_p2 = (icmp_ln30_3_fu_378_p2.read() | icmp_ln30_2_fu_372_p2.read());
}

void getBias::thread_select_ln30_1_fu_398_p3() {
    select_ln30_1_fu_398_p3 = (!icmp_ln30_1_fu_366_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln30_1_fu_366_p2.read()[0].to_bool())? tmp_5_fu_342_p6.read(): network_weights_bias_113.read());
}

void getBias::thread_select_ln30_2_fu_412_p3() {
    select_ln30_2_fu_412_p3 = (!or_ln30_fu_392_p2.read()[0].is_01())? sc_lv<32>(): ((or_ln30_fu_392_p2.read()[0].to_bool())? select_ln30_fu_384_p3.read(): select_ln30_1_fu_398_p3.read());
}

void getBias::thread_select_ln30_fu_384_p3() {
    select_ln30_fu_384_p3 = (!icmp_ln30_3_fu_378_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln30_3_fu_378_p2.read()[0].to_bool())? tmp_fu_274_p18.read(): tmp_4_fu_316_p10.read());
}

void getBias::thread_tmp_4_fu_316_p9() {
    tmp_4_fu_316_p9 = index.read().range(3-1, 0);
}

void getBias::thread_tmp_5_fu_342_p5() {
    tmp_5_fu_342_p5 = index.read().range(2-1, 0);
}

void getBias::thread_tmp_fu_274_p17() {
    tmp_fu_274_p17 = index.read().range(4-1, 0);
}

void getBias::thread_trunc_ln30_fu_356_p1() {
    trunc_ln30_fu_356_p1 = layer.read().range(2-1, 0);
}

}

