// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getWeight_HH_
#define _getWeight_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "network_top_mux_1cud.h"
#include "network_top_mux_6dEe.h"
#include "network_top_mux_8eOg.h"

namespace ap_rtl {

struct getWeight : public sc_module {
    // Port declarations 93
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > network_weights_weig;
    sc_in< sc_lv<8> > network_weights_weig_175;
    sc_in< sc_lv<8> > network_weights_weig_176;
    sc_in< sc_lv<8> > network_weights_weig_177;
    sc_in< sc_lv<8> > network_weights_weig_178;
    sc_in< sc_lv<8> > network_weights_weig_179;
    sc_in< sc_lv<8> > network_weights_weig_180;
    sc_in< sc_lv<8> > network_weights_weig_181;
    sc_in< sc_lv<8> > network_weights_weig_182;
    sc_in< sc_lv<8> > network_weights_weig_183;
    sc_in< sc_lv<8> > network_weights_weig_184;
    sc_in< sc_lv<8> > network_weights_weig_185;
    sc_in< sc_lv<8> > network_weights_weig_186;
    sc_in< sc_lv<8> > network_weights_weig_187;
    sc_in< sc_lv<8> > network_weights_weig_188;
    sc_in< sc_lv<8> > network_weights_weig_189;
    sc_in< sc_lv<8> > network_weights_weig_190;
    sc_in< sc_lv<8> > network_weights_weig_191;
    sc_in< sc_lv<8> > network_weights_weig_192;
    sc_in< sc_lv<8> > network_weights_weig_193;
    sc_in< sc_lv<8> > network_weights_weig_194;
    sc_in< sc_lv<8> > network_weights_weig_195;
    sc_in< sc_lv<8> > network_weights_weig_196;
    sc_in< sc_lv<8> > network_weights_weig_197;
    sc_in< sc_lv<8> > network_weights_weig_198;
    sc_in< sc_lv<8> > network_weights_weig_199;
    sc_in< sc_lv<8> > network_weights_weig_200;
    sc_in< sc_lv<8> > network_weights_weig_201;
    sc_in< sc_lv<8> > network_weights_weig_202;
    sc_in< sc_lv<8> > network_weights_weig_203;
    sc_in< sc_lv<8> > network_weights_weig_204;
    sc_in< sc_lv<8> > network_weights_weig_205;
    sc_in< sc_lv<8> > network_weights_weig_206;
    sc_in< sc_lv<8> > network_weights_weig_207;
    sc_in< sc_lv<8> > network_weights_weig_208;
    sc_in< sc_lv<8> > network_weights_weig_209;
    sc_in< sc_lv<8> > network_weights_weig_210;
    sc_in< sc_lv<8> > network_weights_weig_211;
    sc_in< sc_lv<8> > network_weights_weig_212;
    sc_in< sc_lv<8> > network_weights_weig_213;
    sc_in< sc_lv<8> > network_weights_weig_214;
    sc_in< sc_lv<8> > network_weights_weig_215;
    sc_in< sc_lv<8> > network_weights_weig_216;
    sc_in< sc_lv<8> > network_weights_weig_217;
    sc_in< sc_lv<8> > network_weights_weig_218;
    sc_in< sc_lv<8> > network_weights_weig_219;
    sc_in< sc_lv<8> > network_weights_weig_220;
    sc_in< sc_lv<8> > network_weights_weig_221;
    sc_in< sc_lv<8> > network_weights_weig_222;
    sc_in< sc_lv<8> > network_weights_weig_223;
    sc_in< sc_lv<8> > network_weights_weig_224;
    sc_in< sc_lv<8> > network_weights_weig_225;
    sc_in< sc_lv<8> > network_weights_weig_226;
    sc_in< sc_lv<8> > network_weights_weig_227;
    sc_in< sc_lv<8> > network_weights_weig_228;
    sc_in< sc_lv<8> > network_weights_weig_229;
    sc_in< sc_lv<8> > network_weights_weig_230;
    sc_in< sc_lv<8> > network_weights_weig_231;
    sc_in< sc_lv<8> > network_weights_weig_232;
    sc_in< sc_lv<8> > network_weights_weig_233;
    sc_in< sc_lv<8> > network_weights_weig_234;
    sc_in< sc_lv<8> > network_weights_weig_235;
    sc_in< sc_lv<8> > network_weights_weig_236;
    sc_in< sc_lv<8> > network_weights_weig_237;
    sc_in< sc_lv<8> > network_weights_weig_238;
    sc_in< sc_lv<8> > network_weights_weig_239;
    sc_in< sc_lv<8> > network_weights_weig_240;
    sc_in< sc_lv<8> > network_weights_weig_241;
    sc_in< sc_lv<8> > network_weights_weig_242;
    sc_in< sc_lv<8> > network_weights_weig_243;
    sc_in< sc_lv<8> > network_weights_weig_244;
    sc_in< sc_lv<8> > network_weights_weig_245;
    sc_in< sc_lv<8> > network_weights_weig_246;
    sc_in< sc_lv<8> > network_weights_weig_247;
    sc_in< sc_lv<8> > network_weights_weig_248;
    sc_in< sc_lv<8> > network_weights_weig_249;
    sc_in< sc_lv<8> > network_weights_weig_250;
    sc_in< sc_lv<8> > network_weights_weig_251;
    sc_in< sc_lv<8> > network_weights_weig_252;
    sc_in< sc_lv<8> > network_weights_weig_253;
    sc_in< sc_lv<8> > network_weights_weig_254;
    sc_in< sc_lv<8> > network_weights_weig_255;
    sc_in< sc_lv<8> > network_weights_weig_256;
    sc_in< sc_lv<8> > network_weights_weig_257;
    sc_in< sc_lv<8> > network_weights_weig_258;
    sc_in< sc_lv<8> > network_weights_weig_259;
    sc_in< sc_lv<8> > network_weights_weig_260;
    sc_in< sc_lv<8> > network_weights_weig_261;
    sc_in< sc_lv<4> > layer;
    sc_in< sc_lv<4> > index_0;
    sc_in< sc_lv<4> > index_1;
    sc_out< sc_lv<8> > ap_return;


    // Module declarations
    getWeight(sc_module_name name);
    SC_HAS_PROCESS(getWeight);

    ~getWeight();

    sc_trace_file* mVcdFile;

    network_top_mux_1cud<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* network_top_mux_1cud_U23;
    network_top_mux_6dEe<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,8>* network_top_mux_6dEe_U24;
    network_top_mux_8eOg<1,1,8,8,8,8,8,8,8,8,3,8>* network_top_mux_8eOg_U25;
    sc_signal< sc_lv<3> > trunc_ln11_fu_750_p1;
    sc_signal< sc_lv<1> > trunc_ln11_1_fu_754_p1;
    sc_signal< sc_lv<4> > tmp_3_fu_758_p3;
    sc_signal< sc_lv<5> > tmp_fu_770_p17;
    sc_signal< sc_lv<3> > trunc_ln14_fu_808_p1;
    sc_signal< sc_lv<6> > tmp_4_fu_812_p3;
    sc_signal< sc_lv<7> > tmp_1_fu_824_p65;
    sc_signal< sc_lv<2> > trunc_ln8_fu_980_p1;
    sc_signal< sc_lv<1> > icmp_ln8_2_fu_996_p2;
    sc_signal< sc_lv<8> > tmp_fu_770_p18;
    sc_signal< sc_lv<8> > tmp_1_fu_824_p66;
    sc_signal< sc_lv<1> > icmp_ln8_1_fu_990_p2;
    sc_signal< sc_lv<1> > icmp_ln8_fu_984_p2;
    sc_signal< sc_lv<8> > tmp_2_fu_958_p10;
    sc_signal< sc_lv<1> > or_ln8_fu_1010_p2;
    sc_signal< sc_lv<8> > select_ln8_fu_1002_p3;
    sc_signal< sc_lv<8> > select_ln8_1_fu_1016_p3;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln8_1_fu_990_p2();
    void thread_icmp_ln8_2_fu_996_p2();
    void thread_icmp_ln8_fu_984_p2();
    void thread_or_ln8_fu_1010_p2();
    void thread_select_ln8_1_fu_1016_p3();
    void thread_select_ln8_fu_1002_p3();
    void thread_tmp_1_fu_824_p65();
    void thread_tmp_3_fu_758_p3();
    void thread_tmp_4_fu_812_p3();
    void thread_tmp_fu_770_p17();
    void thread_trunc_ln11_1_fu_754_p1();
    void thread_trunc_ln11_fu_750_p1();
    void thread_trunc_ln14_fu_808_p1();
    void thread_trunc_ln8_fu_980_p1();
};

}

using namespace ap_rtl;

#endif
