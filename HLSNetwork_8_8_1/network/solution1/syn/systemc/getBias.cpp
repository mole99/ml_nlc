// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getBias.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getBias::ap_const_logic_1 = sc_dt::Log_1;
const bool getBias::ap_const_boolean_1 = true;
const sc_lv<2> getBias::ap_const_lv2_2 = "10";
const sc_lv<2> getBias::ap_const_lv2_1 = "1";
const sc_lv<2> getBias::ap_const_lv2_0 = "00";
const sc_lv<32> getBias::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> getBias::ap_const_lv1_0 = "0";
const sc_logic getBias::ap_const_logic_0 = sc_dt::Log_0;

getBias::getBias(sc_module_name name) : sc_module(name), mVcdFile(0) {
    network_top_mux_8bkb_U1 = new network_top_mux_8bkb<1,1,32,32,32,32,32,32,32,32,3,32>("network_top_mux_8bkb_U1");
    network_top_mux_8bkb_U1->din0(network_weights_bias);
    network_top_mux_8bkb_U1->din1(network_weights_bias_33);
    network_top_mux_8bkb_U1->din2(network_weights_bias_34);
    network_top_mux_8bkb_U1->din3(network_weights_bias_35);
    network_top_mux_8bkb_U1->din4(network_weights_bias_36);
    network_top_mux_8bkb_U1->din5(network_weights_bias_37);
    network_top_mux_8bkb_U1->din6(network_weights_bias_38);
    network_top_mux_8bkb_U1->din7(network_weights_bias_39);
    network_top_mux_8bkb_U1->din8(trunc_ln29_fu_166_p1);
    network_top_mux_8bkb_U1->dout(tmp_fu_170_p10);
    network_top_mux_8bkb_U2 = new network_top_mux_8bkb<1,1,32,32,32,32,32,32,32,32,3,32>("network_top_mux_8bkb_U2");
    network_top_mux_8bkb_U2->din0(network_weights_bias_40);
    network_top_mux_8bkb_U2->din1(network_weights_bias_41);
    network_top_mux_8bkb_U2->din2(network_weights_bias_42);
    network_top_mux_8bkb_U2->din3(network_weights_bias_43);
    network_top_mux_8bkb_U2->din4(network_weights_bias_44);
    network_top_mux_8bkb_U2->din5(network_weights_bias_45);
    network_top_mux_8bkb_U2->din6(network_weights_bias_46);
    network_top_mux_8bkb_U2->din7(network_weights_bias_47);
    network_top_mux_8bkb_U2->din8(trunc_ln29_fu_166_p1);
    network_top_mux_8bkb_U2->dout(tmp_3_fu_192_p10);

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( or_ln26_fu_244_p2 );
    sensitive << ( select_ln26_fu_236_p3 );
    sensitive << ( select_ln26_1_fu_250_p3 );

    SC_METHOD(thread_icmp_ln26_1_fu_224_p2);
    sensitive << ( trunc_ln26_fu_214_p1 );

    SC_METHOD(thread_icmp_ln26_2_fu_230_p2);
    sensitive << ( trunc_ln26_fu_214_p1 );

    SC_METHOD(thread_icmp_ln26_fu_218_p2);
    sensitive << ( trunc_ln26_fu_214_p1 );
    sensitive << ( or_ln26_fu_244_p2 );

    SC_METHOD(thread_or_ln26_fu_244_p2);
    sensitive << ( icmp_ln26_2_fu_230_p2 );
    sensitive << ( icmp_ln26_1_fu_224_p2 );

    SC_METHOD(thread_select_ln26_1_fu_250_p3);
    sensitive << ( network_weights_bias_48 );
    sensitive << ( icmp_ln26_fu_218_p2 );

    SC_METHOD(thread_select_ln26_fu_236_p3);
    sensitive << ( icmp_ln26_2_fu_230_p2 );
    sensitive << ( tmp_fu_170_p10 );
    sensitive << ( tmp_3_fu_192_p10 );

    SC_METHOD(thread_trunc_ln26_fu_214_p1);
    sensitive << ( layer );

    SC_METHOD(thread_trunc_ln29_fu_166_p1);
    sensitive << ( index );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getBias_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, network_weights_bias, "(port)network_weights_bias");
    sc_trace(mVcdFile, network_weights_bias_33, "(port)network_weights_bias_33");
    sc_trace(mVcdFile, network_weights_bias_34, "(port)network_weights_bias_34");
    sc_trace(mVcdFile, network_weights_bias_35, "(port)network_weights_bias_35");
    sc_trace(mVcdFile, network_weights_bias_36, "(port)network_weights_bias_36");
    sc_trace(mVcdFile, network_weights_bias_37, "(port)network_weights_bias_37");
    sc_trace(mVcdFile, network_weights_bias_38, "(port)network_weights_bias_38");
    sc_trace(mVcdFile, network_weights_bias_39, "(port)network_weights_bias_39");
    sc_trace(mVcdFile, network_weights_bias_40, "(port)network_weights_bias_40");
    sc_trace(mVcdFile, network_weights_bias_41, "(port)network_weights_bias_41");
    sc_trace(mVcdFile, network_weights_bias_42, "(port)network_weights_bias_42");
    sc_trace(mVcdFile, network_weights_bias_43, "(port)network_weights_bias_43");
    sc_trace(mVcdFile, network_weights_bias_44, "(port)network_weights_bias_44");
    sc_trace(mVcdFile, network_weights_bias_45, "(port)network_weights_bias_45");
    sc_trace(mVcdFile, network_weights_bias_46, "(port)network_weights_bias_46");
    sc_trace(mVcdFile, network_weights_bias_47, "(port)network_weights_bias_47");
    sc_trace(mVcdFile, network_weights_bias_48, "(port)network_weights_bias_48");
    sc_trace(mVcdFile, layer, "(port)layer");
    sc_trace(mVcdFile, index, "(port)index");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, trunc_ln29_fu_166_p1, "trunc_ln29_fu_166_p1");
    sc_trace(mVcdFile, trunc_ln26_fu_214_p1, "trunc_ln26_fu_214_p1");
    sc_trace(mVcdFile, icmp_ln26_2_fu_230_p2, "icmp_ln26_2_fu_230_p2");
    sc_trace(mVcdFile, tmp_fu_170_p10, "tmp_fu_170_p10");
    sc_trace(mVcdFile, tmp_3_fu_192_p10, "tmp_3_fu_192_p10");
    sc_trace(mVcdFile, icmp_ln26_1_fu_224_p2, "icmp_ln26_1_fu_224_p2");
    sc_trace(mVcdFile, icmp_ln26_fu_218_p2, "icmp_ln26_fu_218_p2");
    sc_trace(mVcdFile, or_ln26_fu_244_p2, "or_ln26_fu_244_p2");
    sc_trace(mVcdFile, select_ln26_fu_236_p3, "select_ln26_fu_236_p3");
    sc_trace(mVcdFile, select_ln26_1_fu_250_p3, "select_ln26_1_fu_250_p3");
#endif

    }
}

getBias::~getBias() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete network_top_mux_8bkb_U1;
    delete network_top_mux_8bkb_U2;
}

void getBias::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void getBias::thread_ap_return() {
    ap_return = (!or_ln26_fu_244_p2.read()[0].is_01())? sc_lv<32>(): ((or_ln26_fu_244_p2.read()[0].to_bool())? select_ln26_fu_236_p3.read(): select_ln26_1_fu_250_p3.read());
}

void getBias::thread_icmp_ln26_1_fu_224_p2() {
    icmp_ln26_1_fu_224_p2 = (!trunc_ln26_fu_214_p1.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln26_fu_214_p1.read() == ap_const_lv2_1);
}

void getBias::thread_icmp_ln26_2_fu_230_p2() {
    icmp_ln26_2_fu_230_p2 = (!trunc_ln26_fu_214_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln26_fu_214_p1.read() == ap_const_lv2_0);
}

void getBias::thread_icmp_ln26_fu_218_p2() {
    icmp_ln26_fu_218_p2 = (!trunc_ln26_fu_214_p1.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln26_fu_214_p1.read() == ap_const_lv2_2);
}

void getBias::thread_or_ln26_fu_244_p2() {
    or_ln26_fu_244_p2 = (icmp_ln26_2_fu_230_p2.read() | icmp_ln26_1_fu_224_p2.read());
}

void getBias::thread_select_ln26_1_fu_250_p3() {
    select_ln26_1_fu_250_p3 = (!icmp_ln26_fu_218_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln26_fu_218_p2.read()[0].to_bool())? network_weights_bias_48.read(): ap_const_lv32_0);
}

void getBias::thread_select_ln26_fu_236_p3() {
    select_ln26_fu_236_p3 = (!icmp_ln26_2_fu_230_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln26_2_fu_230_p2.read()[0].to_bool())? tmp_fu_170_p10.read(): tmp_3_fu_192_p10.read());
}

void getBias::thread_trunc_ln26_fu_214_p1() {
    trunc_ln26_fu_214_p1 = layer.read().range(2-1, 0);
}

void getBias::thread_trunc_ln29_fu_166_p1() {
    trunc_ln29_fu_166_p1 = index.read().range(3-1, 0);
}

}

