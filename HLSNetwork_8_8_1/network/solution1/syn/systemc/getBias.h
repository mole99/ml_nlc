// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getBias_HH_
#define _getBias_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "network_top_mux_8bkb.h"

namespace ap_rtl {

struct getBias : public sc_module {
    // Port declarations 21
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > network_weights_bias;
    sc_in< sc_lv<32> > network_weights_bias_33;
    sc_in< sc_lv<32> > network_weights_bias_34;
    sc_in< sc_lv<32> > network_weights_bias_35;
    sc_in< sc_lv<32> > network_weights_bias_36;
    sc_in< sc_lv<32> > network_weights_bias_37;
    sc_in< sc_lv<32> > network_weights_bias_38;
    sc_in< sc_lv<32> > network_weights_bias_39;
    sc_in< sc_lv<32> > network_weights_bias_40;
    sc_in< sc_lv<32> > network_weights_bias_41;
    sc_in< sc_lv<32> > network_weights_bias_42;
    sc_in< sc_lv<32> > network_weights_bias_43;
    sc_in< sc_lv<32> > network_weights_bias_44;
    sc_in< sc_lv<32> > network_weights_bias_45;
    sc_in< sc_lv<32> > network_weights_bias_46;
    sc_in< sc_lv<32> > network_weights_bias_47;
    sc_in< sc_lv<32> > network_weights_bias_48;
    sc_in< sc_lv<4> > layer;
    sc_in< sc_lv<4> > index;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    getBias(sc_module_name name);
    SC_HAS_PROCESS(getBias);

    ~getBias();

    sc_trace_file* mVcdFile;

    network_top_mux_8bkb<1,1,32,32,32,32,32,32,32,32,3,32>* network_top_mux_8bkb_U1;
    network_top_mux_8bkb<1,1,32,32,32,32,32,32,32,32,3,32>* network_top_mux_8bkb_U2;
    sc_signal< sc_lv<3> > trunc_ln29_fu_166_p1;
    sc_signal< sc_lv<2> > trunc_ln26_fu_214_p1;
    sc_signal< sc_lv<1> > icmp_ln26_2_fu_230_p2;
    sc_signal< sc_lv<32> > tmp_fu_170_p10;
    sc_signal< sc_lv<32> > tmp_3_fu_192_p10;
    sc_signal< sc_lv<1> > icmp_ln26_1_fu_224_p2;
    sc_signal< sc_lv<1> > icmp_ln26_fu_218_p2;
    sc_signal< sc_lv<1> > or_ln26_fu_244_p2;
    sc_signal< sc_lv<32> > select_ln26_fu_236_p3;
    sc_signal< sc_lv<32> > select_ln26_1_fu_250_p3;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln26_1_fu_224_p2();
    void thread_icmp_ln26_2_fu_230_p2();
    void thread_icmp_ln26_fu_218_p2();
    void thread_or_ln26_fu_244_p2();
    void thread_select_ln26_1_fu_250_p3();
    void thread_select_ln26_fu_236_p3();
    void thread_trunc_ln26_fu_214_p1();
    void thread_trunc_ln29_fu_166_p1();
};

}

using namespace ap_rtl;

#endif
